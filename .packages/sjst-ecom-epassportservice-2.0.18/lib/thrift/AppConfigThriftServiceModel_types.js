//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')


var ttypes = module.exports = {};
var AppContinueTO = module.exports.AppContinueTO = function(args) {
  this.appContinue = null;
  if (args) {
    if (args.appContinue !== undefined) {
      this.appContinue = args.appContinue;
    }
  }
};
AppContinueTO.prototype = {};
AppContinueTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appContinue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppContinueTO.prototype.write = function(output) {
  output.writeStructBegin('AppContinueTO');
  if (this.appContinue !== null && this.appContinue !== undefined) {
    output.writeFieldBegin('appContinue', Thrift.Type.STRING, 1);
    output.writeString(this.appContinue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppConfigFields = module.exports.AppConfigFields = function(args) {
  this.id = null;
  this.appkey = null;
  this.appSecret = null;
  this.appContinues = null;
  this.type = null;
  this.appCode = null;
  this.partnerCode = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.appSecret !== undefined) {
      this.appSecret = args.appSecret;
    }
    if (args.appContinues !== undefined) {
      this.appContinues = args.appContinues;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.appCode !== undefined) {
      this.appCode = args.appCode;
    }
    if (args.partnerCode !== undefined) {
      this.partnerCode = args.partnerCode;
    }
  }
};
AppConfigFields.prototype = {};
AppConfigFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.id = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.appkey = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.appSecret = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.appContinues = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.type = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.appCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.partnerCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppConfigFields.prototype.write = function(output) {
  output.writeStructBegin('AppConfigFields');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.BOOL, 1);
    output.writeBool(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.BOOL, 2);
    output.writeBool(this.appkey);
    output.writeFieldEnd();
  }
  if (this.appSecret !== null && this.appSecret !== undefined) {
    output.writeFieldBegin('appSecret', Thrift.Type.BOOL, 3);
    output.writeBool(this.appSecret);
    output.writeFieldEnd();
  }
  if (this.appContinues !== null && this.appContinues !== undefined) {
    output.writeFieldBegin('appContinues', Thrift.Type.BOOL, 4);
    output.writeBool(this.appContinues);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.BOOL, 5);
    output.writeBool(this.type);
    output.writeFieldEnd();
  }
  if (this.appCode !== null && this.appCode !== undefined) {
    output.writeFieldBegin('appCode', Thrift.Type.BOOL, 6);
    output.writeBool(this.appCode);
    output.writeFieldEnd();
  }
  if (this.partnerCode !== null && this.partnerCode !== undefined) {
    output.writeFieldBegin('partnerCode', Thrift.Type.BOOL, 7);
    output.writeBool(this.partnerCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MisAppkeyTO = module.exports.MisAppkeyTO = function(args) {
  this.id = null;
  this.mis = null;
  this.appkey = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.mis !== undefined) {
      this.mis = args.mis;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
MisAppkeyTO.prototype = {};
MisAppkeyTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mis = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MisAppkeyTO.prototype.write = function(output) {
  output.writeStructBegin('MisAppkeyTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.mis !== null && this.mis !== undefined) {
    output.writeFieldBegin('mis', Thrift.Type.STRING, 2);
    output.writeString(this.mis);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 3);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomBasicAuthTO = module.exports.EcomBasicAuthTO = function(args) {
  this.id = null;
  this.appkey = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appkey is unset!');
    }
  }
};
EcomBasicAuthTO.prototype = {};
EcomBasicAuthTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomBasicAuthTO.prototype.write = function(output) {
  output.writeStructBegin('EcomBasicAuthTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomAuthTO = module.exports.EcomAuthTO = function(args) {
  this.id = null;
  this.appkey = null;
  this.appSecret = null;
  this.desc = null;
  this.author = null;
  this.addTime = null;
  this.modTime = null;
  this.type = null;
  this.appCode = null;
  this.partnerCode = null;
  this.octoAppkey = null;
  this.bgSource = null;
  this.productName = null;
  this.productAddress = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.appSecret !== undefined) {
      this.appSecret = args.appSecret;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    }
    if (args.modTime !== undefined) {
      this.modTime = args.modTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.appCode !== undefined) {
      this.appCode = args.appCode;
    }
    if (args.partnerCode !== undefined) {
      this.partnerCode = args.partnerCode;
    }
    if (args.octoAppkey !== undefined) {
      this.octoAppkey = args.octoAppkey;
    }
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.productAddress !== undefined) {
      this.productAddress = args.productAddress;
    }
  }
};
EcomAuthTO.prototype = {};
EcomAuthTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.addTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.modTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.appCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.partnerCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.octoAppkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.productAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomAuthTO.prototype.write = function(output) {
  output.writeStructBegin('EcomAuthTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.appSecret !== null && this.appSecret !== undefined) {
    output.writeFieldBegin('appSecret', Thrift.Type.STRING, 3);
    output.writeString(this.appSecret);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 5);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.I32, 6);
    output.writeI32(this.addTime);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.I32, 7);
    output.writeI32(this.modTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 8);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.appCode !== null && this.appCode !== undefined) {
    output.writeFieldBegin('appCode', Thrift.Type.I32, 9);
    output.writeI32(this.appCode);
    output.writeFieldEnd();
  }
  if (this.partnerCode !== null && this.partnerCode !== undefined) {
    output.writeFieldBegin('partnerCode', Thrift.Type.I32, 10);
    output.writeI32(this.partnerCode);
    output.writeFieldEnd();
  }
  if (this.octoAppkey !== null && this.octoAppkey !== undefined) {
    output.writeFieldBegin('octoAppkey', Thrift.Type.STRING, 11);
    output.writeString(this.octoAppkey);
    output.writeFieldEnd();
  }
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 12);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 13);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.productAddress !== null && this.productAddress !== undefined) {
    output.writeFieldBegin('productAddress', Thrift.Type.STRING, 14);
    output.writeString(this.productAddress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppKeyTO = module.exports.AppKeyTO = function(args) {
  this.id = null;
  this.appkey = null;
  this.appSecret = null;
  this.desc = null;
  this.author = null;
  this.addTime = null;
  this.modTime = null;
  this.type = null;
  this.appCode = null;
  this.partnerCode = null;
  this.octoAppkey = null;
  this.bgSource = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appkey is unset!');
    }
    if (args.appSecret !== undefined) {
      this.appSecret = args.appSecret;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appSecret is unset!');
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field desc is unset!');
    }
    if (args.author !== undefined) {
      this.author = args.author;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field author is unset!');
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field addTime is unset!');
    }
    if (args.modTime !== undefined) {
      this.modTime = args.modTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modTime is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.appCode !== undefined) {
      this.appCode = args.appCode;
    }
    if (args.partnerCode !== undefined) {
      this.partnerCode = args.partnerCode;
    }
    if (args.octoAppkey !== undefined) {
      this.octoAppkey = args.octoAppkey;
    }
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    }
  }
};
AppKeyTO.prototype = {};
AppKeyTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.addTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.modTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.appCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.partnerCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.octoAppkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppKeyTO.prototype.write = function(output) {
  output.writeStructBegin('AppKeyTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.appSecret !== null && this.appSecret !== undefined) {
    output.writeFieldBegin('appSecret', Thrift.Type.STRING, 3);
    output.writeString(this.appSecret);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 4);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 5);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.I32, 6);
    output.writeI32(this.addTime);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.I32, 7);
    output.writeI32(this.modTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 8);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.appCode !== null && this.appCode !== undefined) {
    output.writeFieldBegin('appCode', Thrift.Type.I32, 9);
    output.writeI32(this.appCode);
    output.writeFieldEnd();
  }
  if (this.partnerCode !== null && this.partnerCode !== undefined) {
    output.writeFieldBegin('partnerCode', Thrift.Type.I32, 10);
    output.writeI32(this.partnerCode);
    output.writeFieldEnd();
  }
  if (this.octoAppkey !== null && this.octoAppkey !== undefined) {
    output.writeFieldBegin('octoAppkey', Thrift.Type.STRING, 11);
    output.writeString(this.octoAppkey);
    output.writeFieldEnd();
  }
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 12);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomAuthFields = module.exports.EcomAuthFields = function(args) {
  this.id = null;
  this.appkey = null;
  this.appSecret = null;
  this.desc = null;
  this.author = null;
  this.addTime = null;
  this.modTime = null;
  this.type = null;
  this.appCode = null;
  this.partnerCode = null;
  this.octoAppkey = null;
  this.bgSource = null;
  this.productName = null;
  this.productAddress = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.appSecret !== undefined) {
      this.appSecret = args.appSecret;
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    }
    if (args.modTime !== undefined) {
      this.modTime = args.modTime;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.appCode !== undefined) {
      this.appCode = args.appCode;
    }
    if (args.partnerCode !== undefined) {
      this.partnerCode = args.partnerCode;
    }
    if (args.octoAppkey !== undefined) {
      this.octoAppkey = args.octoAppkey;
    }
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.productAddress !== undefined) {
      this.productAddress = args.productAddress;
    }
  }
};
EcomAuthFields.prototype = {};
EcomAuthFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.id = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.appkey = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.appSecret = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.desc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.author = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.addTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.modTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.type = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.appCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.partnerCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.octoAppkey = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.bgSource = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.productName = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.productAddress = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomAuthFields.prototype.write = function(output) {
  output.writeStructBegin('EcomAuthFields');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.BOOL, 1);
    output.writeBool(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.BOOL, 2);
    output.writeBool(this.appkey);
    output.writeFieldEnd();
  }
  if (this.appSecret !== null && this.appSecret !== undefined) {
    output.writeFieldBegin('appSecret', Thrift.Type.BOOL, 3);
    output.writeBool(this.appSecret);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.BOOL, 4);
    output.writeBool(this.desc);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.BOOL, 5);
    output.writeBool(this.author);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.BOOL, 6);
    output.writeBool(this.addTime);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.BOOL, 7);
    output.writeBool(this.modTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.BOOL, 8);
    output.writeBool(this.type);
    output.writeFieldEnd();
  }
  if (this.appCode !== null && this.appCode !== undefined) {
    output.writeFieldBegin('appCode', Thrift.Type.BOOL, 9);
    output.writeBool(this.appCode);
    output.writeFieldEnd();
  }
  if (this.partnerCode !== null && this.partnerCode !== undefined) {
    output.writeFieldBegin('partnerCode', Thrift.Type.BOOL, 10);
    output.writeBool(this.partnerCode);
    output.writeFieldEnd();
  }
  if (this.octoAppkey !== null && this.octoAppkey !== undefined) {
    output.writeFieldBegin('octoAppkey', Thrift.Type.BOOL, 11);
    output.writeBool(this.octoAppkey);
    output.writeFieldEnd();
  }
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.BOOL, 12);
    output.writeBool(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.BOOL, 13);
    output.writeBool(this.productName);
    output.writeFieldEnd();
  }
  if (this.productAddress !== null && this.productAddress !== undefined) {
    output.writeFieldBegin('productAddress', Thrift.Type.BOOL, 14);
    output.writeBool(this.productAddress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomContinueTO = module.exports.EcomContinueTO = function(args) {
  this.id = null;
  this.url = null;
  this.addTime = null;
  this.modTime = null;
  this.author = null;
  this.authId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    }
    if (args.modTime !== undefined) {
      this.modTime = args.modTime;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.authId !== undefined) {
      this.authId = args.authId;
    }
  }
};
EcomContinueTO.prototype = {};
EcomContinueTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.addTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.modTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.authId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomContinueTO.prototype.write = function(output) {
  output.writeStructBegin('EcomContinueTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.I32, 3);
    output.writeI32(this.addTime);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.I32, 4);
    output.writeI32(this.modTime);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 5);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.authId !== null && this.authId !== undefined) {
    output.writeFieldBegin('authId', Thrift.Type.I32, 6);
    output.writeI32(this.authId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomContinueFields = module.exports.EcomContinueFields = function(args) {
  this.id = null;
  this.url = null;
  this.addTime = null;
  this.modTime = null;
  this.author = null;
  this.authId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    }
    if (args.modTime !== undefined) {
      this.modTime = args.modTime;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.authId !== undefined) {
      this.authId = args.authId;
    }
  }
};
EcomContinueFields.prototype = {};
EcomContinueFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.id = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.url = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.addTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.modTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.author = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.authId = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomContinueFields.prototype.write = function(output) {
  output.writeStructBegin('EcomContinueFields');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.BOOL, 1);
    output.writeBool(this.id);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.BOOL, 2);
    output.writeBool(this.url);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.BOOL, 3);
    output.writeBool(this.addTime);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.BOOL, 4);
    output.writeBool(this.modTime);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.BOOL, 5);
    output.writeBool(this.author);
    output.writeFieldEnd();
  }
  if (this.authId !== null && this.authId !== undefined) {
    output.writeFieldBegin('authId', Thrift.Type.BOOL, 6);
    output.writeBool(this.authId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomMiscTO = module.exports.EcomMiscTO = function(args) {
  this.partTypes = null;
  if (args) {
    if (args.partTypes !== undefined) {
      this.partTypes = args.partTypes;
    }
  }
};
EcomMiscTO.prototype = {};
EcomMiscTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.partTypes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.partTypes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomMiscTO.prototype.write = function(output) {
  output.writeStructBegin('EcomMiscTO');
  if (this.partTypes !== null && this.partTypes !== undefined) {
    output.writeFieldBegin('partTypes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.partTypes.length);
    for (var iter7 in this.partTypes)
    {
      if (this.partTypes.hasOwnProperty(iter7))
      {
        iter7 = this.partTypes[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EcomMiscFields = module.exports.EcomMiscFields = function(args) {
  this.partTypes = null;
  if (args) {
    if (args.partTypes !== undefined) {
      this.partTypes = args.partTypes;
    }
  }
};
EcomMiscFields.prototype = {};
EcomMiscFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.partTypes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomMiscFields.prototype.write = function(output) {
  output.writeStructBegin('EcomMiscFields');
  if (this.partTypes !== null && this.partTypes !== undefined) {
    output.writeFieldBegin('partTypes', Thrift.Type.BOOL, 1);
    output.writeBool(this.partTypes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppConfigTO = module.exports.AppConfigTO = function(args) {
  this.id = null;
  this.appkey = null;
  this.appSecret = null;
  this.appContinues = null;
  this.type = null;
  this.appCode = null;
  this.partnerCode = null;
  this.ecomBasicAuthTO = null;
  this.ecomAuthTO = null;
  this.ecomContinueTOs = null;
  this.ecomMiscTO = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.appSecret !== undefined) {
      this.appSecret = args.appSecret;
    }
    if (args.appContinues !== undefined) {
      this.appContinues = args.appContinues;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.appCode !== undefined) {
      this.appCode = args.appCode;
    }
    if (args.partnerCode !== undefined) {
      this.partnerCode = args.partnerCode;
    }
    if (args.ecomBasicAuthTO !== undefined) {
      this.ecomBasicAuthTO = args.ecomBasicAuthTO;
    }
    if (args.ecomAuthTO !== undefined) {
      this.ecomAuthTO = args.ecomAuthTO;
    }
    if (args.ecomContinueTOs !== undefined) {
      this.ecomContinueTOs = args.ecomContinueTOs;
    }
    if (args.ecomMiscTO !== undefined) {
      this.ecomMiscTO = args.ecomMiscTO;
    }
  }
};
AppConfigTO.prototype = {};
AppConfigTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appSecret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.appContinues = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.AppContinueTO();
          elem14.read(input);
          this.appContinues.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.appCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partnerCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomBasicAuthTO = new ttypes.EcomBasicAuthTO();
        this.ecomBasicAuthTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthTO = new ttypes.EcomAuthTO();
        this.ecomAuthTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.ecomContinueTOs = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.EcomContinueTO();
          elem21.read(input);
          this.ecomContinueTOs.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomMiscTO = new ttypes.EcomMiscTO();
        this.ecomMiscTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppConfigTO.prototype.write = function(output) {
  output.writeStructBegin('AppConfigTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.appSecret !== null && this.appSecret !== undefined) {
    output.writeFieldBegin('appSecret', Thrift.Type.STRING, 3);
    output.writeString(this.appSecret);
    output.writeFieldEnd();
  }
  if (this.appContinues !== null && this.appContinues !== undefined) {
    output.writeFieldBegin('appContinues', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.appContinues.length);
    for (var iter22 in this.appContinues)
    {
      if (this.appContinues.hasOwnProperty(iter22))
      {
        iter22 = this.appContinues[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.appCode !== null && this.appCode !== undefined) {
    output.writeFieldBegin('appCode', Thrift.Type.I32, 6);
    output.writeI32(this.appCode);
    output.writeFieldEnd();
  }
  if (this.partnerCode !== null && this.partnerCode !== undefined) {
    output.writeFieldBegin('partnerCode', Thrift.Type.I32, 7);
    output.writeI32(this.partnerCode);
    output.writeFieldEnd();
  }
  if (this.ecomBasicAuthTO !== null && this.ecomBasicAuthTO !== undefined) {
    output.writeFieldBegin('ecomBasicAuthTO', Thrift.Type.STRUCT, 8);
    this.ecomBasicAuthTO.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuthTO !== null && this.ecomAuthTO !== undefined) {
    output.writeFieldBegin('ecomAuthTO', Thrift.Type.STRUCT, 9);
    this.ecomAuthTO.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomContinueTOs !== null && this.ecomContinueTOs !== undefined) {
    output.writeFieldBegin('ecomContinueTOs', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomContinueTOs.length);
    for (var iter23 in this.ecomContinueTOs)
    {
      if (this.ecomContinueTOs.hasOwnProperty(iter23))
      {
        iter23 = this.ecomContinueTOs[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ecomMiscTO !== null && this.ecomMiscTO !== undefined) {
    output.writeFieldBegin('ecomMiscTO', Thrift.Type.STRUCT, 11);
    this.ecomMiscTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAppkeysReq = module.exports.GetAppkeysReq = function(args) {
  this.octoAppkey = null;
  if (args) {
    if (args.octoAppkey !== undefined) {
      this.octoAppkey = args.octoAppkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field octoAppkey is unset!');
    }
  }
};
GetAppkeysReq.prototype = {};
GetAppkeysReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.octoAppkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAppkeysReq.prototype.write = function(output) {
  output.writeStructBegin('GetAppkeysReq');
  if (this.octoAppkey !== null && this.octoAppkey !== undefined) {
    output.writeFieldBegin('octoAppkey', Thrift.Type.STRING, 1);
    output.writeString(this.octoAppkey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAppkeysResp = module.exports.GetAppkeysResp = function(args) {
  this.status = null;
  this.appkeys = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.appkeys !== undefined) {
      this.appkeys = args.appkeys;
    }
  }
};
GetAppkeysResp.prototype = {};
GetAppkeysResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.appkeys = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.appkeys.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAppkeysResp.prototype.write = function(output) {
  output.writeStructBegin('GetAppkeysResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.appkeys !== null && this.appkeys !== undefined) {
    output.writeFieldBegin('appkeys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.appkeys.length);
    for (var iter31 in this.appkeys)
    {
      if (this.appkeys.hasOwnProperty(iter31))
      {
        iter31 = this.appkeys[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchGetAppkeysReq = module.exports.BatchGetAppkeysReq = function(args) {
  this.octoAppkeys = null;
  if (args) {
    if (args.octoAppkeys !== undefined) {
      this.octoAppkeys = args.octoAppkeys;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field octoAppkeys is unset!');
    }
  }
};
BatchGetAppkeysReq.prototype = {};
BatchGetAppkeysReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.octoAppkeys = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.octoAppkeys.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetAppkeysReq.prototype.write = function(output) {
  output.writeStructBegin('BatchGetAppkeysReq');
  if (this.octoAppkeys !== null && this.octoAppkeys !== undefined) {
    output.writeFieldBegin('octoAppkeys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.octoAppkeys.length);
    for (var iter39 in this.octoAppkeys)
    {
      if (this.octoAppkeys.hasOwnProperty(iter39))
      {
        iter39 = this.octoAppkeys[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchGetAppkeysResp = module.exports.BatchGetAppkeysResp = function(args) {
  this.status = null;
  this.appkeys = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.appkeys !== undefined) {
      this.appkeys = args.appkeys;
    }
  }
};
BatchGetAppkeysResp.prototype = {};
BatchGetAppkeysResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size40 = 0;
        var _rtmp344;
        this.appkeys = {};
        var _ktype41 = 0;
        var _vtype42 = 0;
        _rtmp344 = input.readMapBegin();
        _ktype41 = _rtmp344.ktype;
        _vtype42 = _rtmp344.vtype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var key46 = null;
          var val47 = null;
          key46 = input.readString();
          var _size48 = 0;
          var _rtmp352;
          val47 = [];
          var _etype51 = 0;
          _rtmp352 = input.readListBegin();
          _etype51 = _rtmp352.etype;
          _size48 = _rtmp352.size;
          for (var _i53 = 0; _i53 < _size48; ++_i53)
          {
            var elem54 = null;
            elem54 = input.readString();
            val47.push(elem54);
          }
          input.readListEnd();
          this.appkeys[key46] = val47;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetAppkeysResp.prototype.write = function(output) {
  output.writeStructBegin('BatchGetAppkeysResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.appkeys !== null && this.appkeys !== undefined) {
    output.writeFieldBegin('appkeys', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.appkeys));
    for (var kiter55 in this.appkeys)
    {
      if (this.appkeys.hasOwnProperty(kiter55))
      {
        var viter56 = this.appkeys[kiter55];
        output.writeString(kiter55);
        output.writeListBegin(Thrift.Type.STRING, viter56.length);
        for (var iter57 in viter56)
        {
          if (viter56.hasOwnProperty(iter57))
          {
            iter57 = viter56[iter57];
            output.writeString(iter57);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppConfigReq = module.exports.AppConfigReq = function(args) {
  this.appkey = null;
  this.ecomAuthFields = null;
  this.ecomContinueFields = null;
  this.ecomMiscFields = null;
  if (args) {
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.ecomAuthFields !== undefined) {
      this.ecomAuthFields = args.ecomAuthFields;
    }
    if (args.ecomContinueFields !== undefined) {
      this.ecomContinueFields = args.ecomContinueFields;
    }
    if (args.ecomMiscFields !== undefined) {
      this.ecomMiscFields = args.ecomMiscFields;
    }
  }
};
AppConfigReq.prototype = {};
AppConfigReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthFields = new ttypes.EcomAuthFields();
        this.ecomAuthFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomContinueFields = new ttypes.EcomContinueFields();
        this.ecomContinueFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomMiscFields = new ttypes.EcomMiscFields();
        this.ecomMiscFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppConfigReq.prototype.write = function(output) {
  output.writeStructBegin('AppConfigReq');
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 1);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.ecomAuthFields !== null && this.ecomAuthFields !== undefined) {
    output.writeFieldBegin('ecomAuthFields', Thrift.Type.STRUCT, 3);
    this.ecomAuthFields.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomContinueFields !== null && this.ecomContinueFields !== undefined) {
    output.writeFieldBegin('ecomContinueFields', Thrift.Type.STRUCT, 4);
    this.ecomContinueFields.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomMiscFields !== null && this.ecomMiscFields !== undefined) {
    output.writeFieldBegin('ecomMiscFields', Thrift.Type.STRUCT, 5);
    this.ecomMiscFields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AppConfigResp = module.exports.AppConfigResp = function(args) {
  this.status = null;
  this.appConfig = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.appConfig !== undefined) {
      this.appConfig = args.appConfig;
    }
  }
};
AppConfigResp.prototype = {};
AppConfigResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appConfig = new ttypes.AppConfigTO();
        this.appConfig.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AppConfigResp.prototype.write = function(output) {
  output.writeStructBegin('AppConfigResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.appConfig !== null && this.appConfig !== undefined) {
    output.writeFieldBegin('appConfig', Thrift.Type.STRUCT, 2);
    this.appConfig.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchAppConfigReq = module.exports.BatchAppConfigReq = function(args) {
  this.appkeyList = null;
  this.configFields = null;
  this.ecomAuthFields = null;
  this.ecomContinueFields = null;
  this.ecomMiscFields = null;
  if (args) {
    if (args.appkeyList !== undefined) {
      this.appkeyList = args.appkeyList;
    }
    if (args.configFields !== undefined) {
      this.configFields = args.configFields;
    }
    if (args.ecomAuthFields !== undefined) {
      this.ecomAuthFields = args.ecomAuthFields;
    }
    if (args.ecomContinueFields !== undefined) {
      this.ecomContinueFields = args.ecomContinueFields;
    }
    if (args.ecomMiscFields !== undefined) {
      this.ecomMiscFields = args.ecomMiscFields;
    }
  }
};
BatchAppConfigReq.prototype = {};
BatchAppConfigReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.appkeyList = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = input.readString();
          this.appkeyList.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.configFields = new ttypes.AppConfigFields();
        this.configFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthFields = new ttypes.EcomAuthFields();
        this.ecomAuthFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomContinueFields = new ttypes.EcomContinueFields();
        this.ecomContinueFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomMiscFields = new ttypes.EcomMiscFields();
        this.ecomMiscFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchAppConfigReq.prototype.write = function(output) {
  output.writeStructBegin('BatchAppConfigReq');
  if (this.appkeyList !== null && this.appkeyList !== undefined) {
    output.writeFieldBegin('appkeyList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.appkeyList.length);
    for (var iter65 in this.appkeyList)
    {
      if (this.appkeyList.hasOwnProperty(iter65))
      {
        iter65 = this.appkeyList[iter65];
        output.writeString(iter65);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.configFields !== null && this.configFields !== undefined) {
    output.writeFieldBegin('configFields', Thrift.Type.STRUCT, 2);
    this.configFields.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuthFields !== null && this.ecomAuthFields !== undefined) {
    output.writeFieldBegin('ecomAuthFields', Thrift.Type.STRUCT, 4);
    this.ecomAuthFields.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomContinueFields !== null && this.ecomContinueFields !== undefined) {
    output.writeFieldBegin('ecomContinueFields', Thrift.Type.STRUCT, 5);
    this.ecomContinueFields.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomMiscFields !== null && this.ecomMiscFields !== undefined) {
    output.writeFieldBegin('ecomMiscFields', Thrift.Type.STRUCT, 6);
    this.ecomMiscFields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchAppConfigResp = module.exports.BatchAppConfigResp = function(args) {
  this.status = null;
  this.configMap = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.configMap !== undefined) {
      this.configMap = args.configMap;
    }
  }
};
BatchAppConfigResp.prototype = {};
BatchAppConfigResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size66 = 0;
        var _rtmp370;
        this.configMap = {};
        var _ktype67 = 0;
        var _vtype68 = 0;
        _rtmp370 = input.readMapBegin();
        _ktype67 = _rtmp370.ktype;
        _vtype68 = _rtmp370.vtype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var key72 = null;
          var val73 = null;
          key72 = input.readString();
          val73 = new ttypes.AppConfigTO();
          val73.read(input);
          this.configMap[key72] = val73;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchAppConfigResp.prototype.write = function(output) {
  output.writeStructBegin('BatchAppConfigResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.configMap !== null && this.configMap !== undefined) {
    output.writeFieldBegin('configMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.configMap));
    for (var kiter74 in this.configMap)
    {
      if (this.configMap.hasOwnProperty(kiter74))
      {
        var viter75 = this.configMap[kiter74];
        output.writeString(kiter74);
        viter75.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEcomAuthResp = module.exports.GetEcomAuthResp = function(args) {
  this.status = null;
  this.ecomAuthTO = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomAuthTO !== undefined) {
      this.ecomAuthTO = args.ecomAuthTO;
    }
  }
};
GetEcomAuthResp.prototype = {};
GetEcomAuthResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthTO = new ttypes.EcomAuthTO();
        this.ecomAuthTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEcomAuthResp.prototype.write = function(output) {
  output.writeStructBegin('GetEcomAuthResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuthTO !== null && this.ecomAuthTO !== undefined) {
    output.writeFieldBegin('ecomAuthTO', Thrift.Type.STRUCT, 2);
    this.ecomAuthTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEcomAuthListResp = module.exports.GetEcomAuthListResp = function(args) {
  this.status = null;
  this.ecomAuthTO = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomAuthTO !== undefined) {
      this.ecomAuthTO = args.ecomAuthTO;
    }
  }
};
GetEcomAuthListResp.prototype = {};
GetEcomAuthListResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.ecomAuthTO = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new ttypes.EcomAuthTO();
          elem82.read(input);
          this.ecomAuthTO.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEcomAuthListResp.prototype.write = function(output) {
  output.writeStructBegin('GetEcomAuthListResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuthTO !== null && this.ecomAuthTO !== undefined) {
    output.writeFieldBegin('ecomAuthTO', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomAuthTO.length);
    for (var iter83 in this.ecomAuthTO)
    {
      if (this.ecomAuthTO.hasOwnProperty(iter83))
      {
        iter83 = this.ecomAuthTO[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListAppKeyResp = module.exports.ListAppKeyResp = function(args) {
  this.status = null;
  this.ecomAuthTOs = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomAuthTOs !== undefined) {
      this.ecomAuthTOs = args.ecomAuthTOs;
    }
  }
};
ListAppKeyResp.prototype = {};
ListAppKeyResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.ecomAuthTOs = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.EcomAuthTO();
          elem90.read(input);
          this.ecomAuthTOs.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListAppKeyResp.prototype.write = function(output) {
  output.writeStructBegin('ListAppKeyResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuthTOs !== null && this.ecomAuthTOs !== undefined) {
    output.writeFieldBegin('ecomAuthTOs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomAuthTOs.length);
    for (var iter91 in this.ecomAuthTOs)
    {
      if (this.ecomAuthTOs.hasOwnProperty(iter91))
      {
        iter91 = this.ecomAuthTOs[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetEcomAuthByKeywordReq = module.exports.GetEcomAuthByKeywordReq = function(args) {
  this.keyword = null;
  if (args) {
    if (args.keyword !== undefined) {
      this.keyword = args.keyword;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field keyword is unset!');
    }
  }
};
GetEcomAuthByKeywordReq.prototype = {};
GetEcomAuthByKeywordReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keyword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetEcomAuthByKeywordReq.prototype.write = function(output) {
  output.writeStructBegin('GetEcomAuthByKeywordReq');
  if (this.keyword !== null && this.keyword !== undefined) {
    output.writeFieldBegin('keyword', Thrift.Type.STRING, 1);
    output.writeString(this.keyword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateAppKeyReq = module.exports.CreateAppKeyReq = function(args) {
  this.ecomAuthTO = null;
  if (args) {
    if (args.ecomAuthTO !== undefined) {
      this.ecomAuthTO = args.ecomAuthTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomAuthTO is unset!');
    }
  }
};
CreateAppKeyReq.prototype = {};
CreateAppKeyReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthTO = new ttypes.EcomAuthTO();
        this.ecomAuthTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateAppKeyReq.prototype.write = function(output) {
  output.writeStructBegin('CreateAppKeyReq');
  if (this.ecomAuthTO !== null && this.ecomAuthTO !== undefined) {
    output.writeFieldBegin('ecomAuthTO', Thrift.Type.STRUCT, 1);
    this.ecomAuthTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyAppKeyReq = module.exports.ModifyAppKeyReq = function(args) {
  this.ecomAuthTO = null;
  if (args) {
    if (args.ecomAuthTO !== undefined) {
      this.ecomAuthTO = args.ecomAuthTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomAuthTO is unset!');
    }
  }
};
ModifyAppKeyReq.prototype = {};
ModifyAppKeyReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthTO = new ttypes.EcomAuthTO();
        this.ecomAuthTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyAppKeyReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyAppKeyReq');
  if (this.ecomAuthTO !== null && this.ecomAuthTO !== undefined) {
    output.writeFieldBegin('ecomAuthTO', Thrift.Type.STRUCT, 1);
    this.ecomAuthTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchContinuesByAppkeyReq = module.exports.SearchContinuesByAppkeyReq = function(args) {
  this.appkey = null;
  if (args) {
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appkey is unset!');
    }
  }
};
SearchContinuesByAppkeyReq.prototype = {};
SearchContinuesByAppkeyReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchContinuesByAppkeyReq.prototype.write = function(output) {
  output.writeStructBegin('SearchContinuesByAppkeyReq');
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 1);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContinueByIdsReq = module.exports.GetContinueByIdsReq = function(args) {
  this.continueIds = null;
  this.needEcomAuthTo = null;
  if (args) {
    if (args.continueIds !== undefined) {
      this.continueIds = args.continueIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field continueIds is unset!');
    }
    if (args.needEcomAuthTo !== undefined) {
      this.needEcomAuthTo = args.needEcomAuthTo;
    }
  }
};
GetContinueByIdsReq.prototype = {};
GetContinueByIdsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.continueIds = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = input.readI32();
          this.continueIds.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.needEcomAuthTo = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContinueByIdsReq.prototype.write = function(output) {
  output.writeStructBegin('GetContinueByIdsReq');
  if (this.continueIds !== null && this.continueIds !== undefined) {
    output.writeFieldBegin('continueIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.continueIds.length);
    for (var iter99 in this.continueIds)
    {
      if (this.continueIds.hasOwnProperty(iter99))
      {
        iter99 = this.continueIds[iter99];
        output.writeI32(iter99);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.needEcomAuthTo !== null && this.needEcomAuthTo !== undefined) {
    output.writeFieldBegin('needEcomAuthTo', Thrift.Type.BOOL, 2);
    output.writeBool(this.needEcomAuthTo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetContinueByIdsResp = module.exports.GetContinueByIdsResp = function(args) {
  this.status = null;
  this.ecomContinueTOs = null;
  this.ecomAuthTOs = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomContinueTOs !== undefined) {
      this.ecomContinueTOs = args.ecomContinueTOs;
    }
    if (args.ecomAuthTOs !== undefined) {
      this.ecomAuthTOs = args.ecomAuthTOs;
    }
  }
};
GetContinueByIdsResp.prototype = {};
GetContinueByIdsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.ecomContinueTOs = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new ttypes.EcomContinueTO();
          elem106.read(input);
          this.ecomContinueTOs.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size107 = 0;
        var _rtmp3111;
        this.ecomAuthTOs = [];
        var _etype110 = 0;
        _rtmp3111 = input.readListBegin();
        _etype110 = _rtmp3111.etype;
        _size107 = _rtmp3111.size;
        for (var _i112 = 0; _i112 < _size107; ++_i112)
        {
          var elem113 = null;
          elem113 = new ttypes.EcomAuthTO();
          elem113.read(input);
          this.ecomAuthTOs.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetContinueByIdsResp.prototype.write = function(output) {
  output.writeStructBegin('GetContinueByIdsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomContinueTOs !== null && this.ecomContinueTOs !== undefined) {
    output.writeFieldBegin('ecomContinueTOs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomContinueTOs.length);
    for (var iter114 in this.ecomContinueTOs)
    {
      if (this.ecomContinueTOs.hasOwnProperty(iter114))
      {
        iter114 = this.ecomContinueTOs[iter114];
        iter114.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ecomAuthTOs !== null && this.ecomAuthTOs !== undefined) {
    output.writeFieldBegin('ecomAuthTOs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomAuthTOs.length);
    for (var iter115 in this.ecomAuthTOs)
    {
      if (this.ecomAuthTOs.hasOwnProperty(iter115))
      {
        iter115 = this.ecomAuthTOs[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAppkeyPartTypesReq = module.exports.GetAppkeyPartTypesReq = function(args) {
  this.appkey = null;
  if (args) {
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appkey is unset!');
    }
  }
};
GetAppkeyPartTypesReq.prototype = {};
GetAppkeyPartTypesReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAppkeyPartTypesReq.prototype.write = function(output) {
  output.writeStructBegin('GetAppkeyPartTypesReq');
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 1);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddEcomContinueReq = module.exports.AddEcomContinueReq = function(args) {
  this.authId = null;
  this.ecomContinueTOs = null;
  if (args) {
    if (args.authId !== undefined) {
      this.authId = args.authId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field authId is unset!');
    }
    if (args.ecomContinueTOs !== undefined) {
      this.ecomContinueTOs = args.ecomContinueTOs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomContinueTOs is unset!');
    }
  }
};
AddEcomContinueReq.prototype = {};
AddEcomContinueReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.authId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.ecomContinueTOs = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new ttypes.EcomContinueTO();
          elem122.read(input);
          this.ecomContinueTOs.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddEcomContinueReq.prototype.write = function(output) {
  output.writeStructBegin('AddEcomContinueReq');
  if (this.authId !== null && this.authId !== undefined) {
    output.writeFieldBegin('authId', Thrift.Type.I32, 1);
    output.writeI32(this.authId);
    output.writeFieldEnd();
  }
  if (this.ecomContinueTOs !== null && this.ecomContinueTOs !== undefined) {
    output.writeFieldBegin('ecomContinueTOs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomContinueTOs.length);
    for (var iter123 in this.ecomContinueTOs)
    {
      if (this.ecomContinueTOs.hasOwnProperty(iter123))
      {
        iter123 = this.ecomContinueTOs[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyEcomContinueReq = module.exports.ModifyEcomContinueReq = function(args) {
  this.ecomContinueTOs = null;
  if (args) {
    if (args.ecomContinueTOs !== undefined) {
      this.ecomContinueTOs = args.ecomContinueTOs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomContinueTOs is unset!');
    }
  }
};
ModifyEcomContinueReq.prototype = {};
ModifyEcomContinueReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.ecomContinueTOs = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.EcomContinueTO();
          elem130.read(input);
          this.ecomContinueTOs.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyEcomContinueReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyEcomContinueReq');
  if (this.ecomContinueTOs !== null && this.ecomContinueTOs !== undefined) {
    output.writeFieldBegin('ecomContinueTOs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomContinueTOs.length);
    for (var iter131 in this.ecomContinueTOs)
    {
      if (this.ecomContinueTOs.hasOwnProperty(iter131))
      {
        iter131 = this.ecomContinueTOs[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifySingleEcomContinueReq = module.exports.ModifySingleEcomContinueReq = function(args) {
  this.ecomContinueTO = null;
  if (args) {
    if (args.ecomContinueTO !== undefined) {
      this.ecomContinueTO = args.ecomContinueTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomContinueTO is unset!');
    }
  }
};
ModifySingleEcomContinueReq.prototype = {};
ModifySingleEcomContinueReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomContinueTO = new ttypes.EcomContinueTO();
        this.ecomContinueTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifySingleEcomContinueReq.prototype.write = function(output) {
  output.writeStructBegin('ModifySingleEcomContinueReq');
  if (this.ecomContinueTO !== null && this.ecomContinueTO !== undefined) {
    output.writeFieldBegin('ecomContinueTO', Thrift.Type.STRUCT, 1);
    this.ecomContinueTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteEcomContinueReq = module.exports.DeleteEcomContinueReq = function(args) {
  this.ecomContinueTOs = null;
  if (args) {
    if (args.ecomContinueTOs !== undefined) {
      this.ecomContinueTOs = args.ecomContinueTOs;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomContinueTOs is unset!');
    }
  }
};
DeleteEcomContinueReq.prototype = {};
DeleteEcomContinueReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.ecomContinueTOs = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.EcomContinueTO();
          elem138.read(input);
          this.ecomContinueTOs.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteEcomContinueReq.prototype.write = function(output) {
  output.writeStructBegin('DeleteEcomContinueReq');
  if (this.ecomContinueTOs !== null && this.ecomContinueTOs !== undefined) {
    output.writeFieldBegin('ecomContinueTOs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomContinueTOs.length);
    for (var iter139 in this.ecomContinueTOs)
    {
      if (this.ecomContinueTOs.hasOwnProperty(iter139))
      {
        iter139 = this.ecomContinueTOs[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SaveMisAppKeysReq = module.exports.SaveMisAppKeysReq = function(args) {
  this.mis = null;
  this.appKeys = null;
  this.type = null;
  if (args) {
    if (args.mis !== undefined) {
      this.mis = args.mis;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mis is unset!');
    }
    if (args.appKeys !== undefined) {
      this.appKeys = args.appKeys;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appKeys is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
SaveMisAppKeysReq.prototype = {};
SaveMisAppKeysReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mis = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.appKeys = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readString();
          this.appKeys.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SaveMisAppKeysReq.prototype.write = function(output) {
  output.writeStructBegin('SaveMisAppKeysReq');
  if (this.mis !== null && this.mis !== undefined) {
    output.writeFieldBegin('mis', Thrift.Type.STRING, 1);
    output.writeString(this.mis);
    output.writeFieldEnd();
  }
  if (this.appKeys !== null && this.appKeys !== undefined) {
    output.writeFieldBegin('appKeys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.appKeys.length);
    for (var iter147 in this.appKeys)
    {
      if (this.appKeys.hasOwnProperty(iter147))
      {
        iter147 = this.appKeys[iter147];
        output.writeString(iter147);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GrantMisAppKeyReq = module.exports.GrantMisAppKeyReq = function(args) {
  this.misList = null;
  this.appKey = null;
  this.type = null;
  if (args) {
    if (args.misList !== undefined) {
      this.misList = args.misList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field misList is unset!');
    }
    if (args.appKey !== undefined) {
      this.appKey = args.appKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appKey is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
GrantMisAppKeyReq.prototype = {};
GrantMisAppKeyReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.misList = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = input.readString();
          this.misList.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GrantMisAppKeyReq.prototype.write = function(output) {
  output.writeStructBegin('GrantMisAppKeyReq');
  if (this.misList !== null && this.misList !== undefined) {
    output.writeFieldBegin('misList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.misList.length);
    for (var iter155 in this.misList)
    {
      if (this.misList.hasOwnProperty(iter155))
      {
        iter155 = this.misList[iter155];
        output.writeString(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.appKey !== null && this.appKey !== undefined) {
    output.writeFieldBegin('appKey', Thrift.Type.STRING, 2);
    output.writeString(this.appKey);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetMisAppKeysReq = module.exports.GetMisAppKeysReq = function(args) {
  this.mis = null;
  if (args) {
    if (args.mis !== undefined) {
      this.mis = args.mis;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mis is unset!');
    }
  }
};
GetMisAppKeysReq.prototype = {};
GetMisAppKeysReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mis = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMisAppKeysReq.prototype.write = function(output) {
  output.writeStructBegin('GetMisAppKeysReq');
  if (this.mis !== null && this.mis !== undefined) {
    output.writeFieldBegin('mis', Thrift.Type.STRING, 1);
    output.writeString(this.mis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGrantMisReq = module.exports.GetGrantMisReq = function(args) {
  this.appKey = null;
  this.type = null;
  if (args) {
    if (args.appKey !== undefined) {
      this.appKey = args.appKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appKey is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
GetGrantMisReq.prototype = {};
GetGrantMisReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGrantMisReq.prototype.write = function(output) {
  output.writeStructBegin('GetGrantMisReq');
  if (this.appKey !== null && this.appKey !== undefined) {
    output.writeFieldBegin('appKey', Thrift.Type.STRING, 1);
    output.writeString(this.appKey);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchContinuesByAppkeyResp = module.exports.SearchContinuesByAppkeyResp = function(args) {
  this.status = null;
  this.ecomAuthTO = null;
  this.ecomContinueList = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomAuthTO !== undefined) {
      this.ecomAuthTO = args.ecomAuthTO;
    }
    if (args.ecomContinueList !== undefined) {
      this.ecomContinueList = args.ecomContinueList;
    }
  }
};
SearchContinuesByAppkeyResp.prototype = {};
SearchContinuesByAppkeyResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuthTO = new ttypes.EcomAuthTO();
        this.ecomAuthTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.ecomContinueList = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = new ttypes.EcomContinueTO();
          elem162.read(input);
          this.ecomContinueList.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchContinuesByAppkeyResp.prototype.write = function(output) {
  output.writeStructBegin('SearchContinuesByAppkeyResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuthTO !== null && this.ecomAuthTO !== undefined) {
    output.writeFieldBegin('ecomAuthTO', Thrift.Type.STRUCT, 2);
    this.ecomAuthTO.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomContinueList !== null && this.ecomContinueList !== undefined) {
    output.writeFieldBegin('ecomContinueList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomContinueList.length);
    for (var iter163 in this.ecomContinueList)
    {
      if (this.ecomContinueList.hasOwnProperty(iter163))
      {
        iter163 = this.ecomContinueList[iter163];
        iter163.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAppkeyPartTypesResp = module.exports.GetAppkeyPartTypesResp = function(args) {
  this.status = null;
  this.partTypes = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.partTypes !== undefined) {
      this.partTypes = args.partTypes;
    }
  }
};
GetAppkeyPartTypesResp.prototype = {};
GetAppkeyPartTypesResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.partTypes = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = input.readI32();
          this.partTypes.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAppkeyPartTypesResp.prototype.write = function(output) {
  output.writeStructBegin('GetAppkeyPartTypesResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.partTypes !== null && this.partTypes !== undefined) {
    output.writeFieldBegin('partTypes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.partTypes.length);
    for (var iter171 in this.partTypes)
    {
      if (this.partTypes.hasOwnProperty(iter171))
      {
        iter171 = this.partTypes[iter171];
        output.writeI32(iter171);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetMisAppKeysResp = module.exports.GetMisAppKeysResp = function(args) {
  this.status = null;
  this.appKeys = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.appKeys !== undefined) {
      this.appKeys = args.appKeys;
    }
  }
};
GetMisAppKeysResp.prototype = {};
GetMisAppKeysResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.appKeys = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = input.readString();
          this.appKeys.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetMisAppKeysResp.prototype.write = function(output) {
  output.writeStructBegin('GetMisAppKeysResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.appKeys !== null && this.appKeys !== undefined) {
    output.writeFieldBegin('appKeys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.appKeys.length);
    for (var iter179 in this.appKeys)
    {
      if (this.appKeys.hasOwnProperty(iter179))
      {
        iter179 = this.appKeys[iter179];
        output.writeString(iter179);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetGrantMisResp = module.exports.GetGrantMisResp = function(args) {
  this.status = null;
  this.misList = null;
  this.misAppkeyList = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.misList !== undefined) {
      this.misList = args.misList;
    }
    if (args.misAppkeyList !== undefined) {
      this.misAppkeyList = args.misAppkeyList;
    }
  }
};
GetGrantMisResp.prototype = {};
GetGrantMisResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.misList = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          elem186 = input.readString();
          this.misList.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size187 = 0;
        var _rtmp3191;
        this.misAppkeyList = [];
        var _etype190 = 0;
        _rtmp3191 = input.readListBegin();
        _etype190 = _rtmp3191.etype;
        _size187 = _rtmp3191.size;
        for (var _i192 = 0; _i192 < _size187; ++_i192)
        {
          var elem193 = null;
          elem193 = new ttypes.MisAppkeyTO();
          elem193.read(input);
          this.misAppkeyList.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetGrantMisResp.prototype.write = function(output) {
  output.writeStructBegin('GetGrantMisResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.misList !== null && this.misList !== undefined) {
    output.writeFieldBegin('misList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.misList.length);
    for (var iter194 in this.misList)
    {
      if (this.misList.hasOwnProperty(iter194))
      {
        iter194 = this.misList[iter194];
        output.writeString(iter194);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.misAppkeyList !== null && this.misAppkeyList !== undefined) {
    output.writeFieldBegin('misAppkeyList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.misAppkeyList.length);
    for (var iter195 in this.misAppkeyList)
    {
      if (this.misAppkeyList.hasOwnProperty(iter195))
      {
        iter195 = this.misAppkeyList[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchEcomAuthConditionTO = module.exports.SearchEcomAuthConditionTO = function(args) {
  this.id = null;
  this.appkey = null;
  this.type = null;
  this.productName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
  }
};
SearchEcomAuthConditionTO.prototype = {};
SearchEcomAuthConditionTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchEcomAuthConditionTO.prototype.write = function(output) {
  output.writeStructBegin('SearchEcomAuthConditionTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 4);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchEcomAuthReq = module.exports.SearchEcomAuthReq = function(args) {
  this.condition = null;
  this.pageModel = null;
  if (args) {
    if (args.condition !== undefined) {
      this.condition = args.condition;
    }
    if (args.pageModel !== undefined) {
      this.pageModel = args.pageModel;
    }
  }
};
SearchEcomAuthReq.prototype = {};
SearchEcomAuthReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.condition = new ttypes.SearchEcomAuthConditionTO();
        this.condition.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageModel = new CommonModel_ttypes.PageModel();
        this.pageModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchEcomAuthReq.prototype.write = function(output) {
  output.writeStructBegin('SearchEcomAuthReq');
  if (this.condition !== null && this.condition !== undefined) {
    output.writeFieldBegin('condition', Thrift.Type.STRUCT, 1);
    this.condition.write(output);
    output.writeFieldEnd();
  }
  if (this.pageModel !== null && this.pageModel !== undefined) {
    output.writeFieldBegin('pageModel', Thrift.Type.STRUCT, 2);
    this.pageModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchEcomAuthResp = module.exports.SearchEcomAuthResp = function(args) {
  this.status = null;
  this.ecomAuths = null;
  this.total = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomAuths !== undefined) {
      this.ecomAuths = args.ecomAuths;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
  }
};
SearchEcomAuthResp.prototype = {};
SearchEcomAuthResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.ecomAuths = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.EcomAuthTO();
          elem202.read(input);
          this.ecomAuths.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchEcomAuthResp.prototype.write = function(output) {
  output.writeStructBegin('SearchEcomAuthResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAuths !== null && this.ecomAuths !== undefined) {
    output.writeFieldBegin('ecomAuths', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomAuths.length);
    for (var iter203 in this.ecomAuths)
    {
      if (this.ecomAuths.hasOwnProperty(iter203))
      {
        iter203 = this.ecomAuths[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchatchGetGrantMisReq = module.exports.BatchatchGetGrantMisReq = function(args) {
  this.appkey = null;
  this.type = null;
  if (args) {
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appkey is unset!');
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
BatchatchGetGrantMisReq.prototype = {};
BatchatchGetGrantMisReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.appkey = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = input.readString();
          this.appkey.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchatchGetGrantMisReq.prototype.write = function(output) {
  output.writeStructBegin('BatchatchGetGrantMisReq');
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.appkey.length);
    for (var iter211 in this.appkey)
    {
      if (this.appkey.hasOwnProperty(iter211))
      {
        iter211 = this.appkey[iter211];
        output.writeString(iter211);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchatchGetGrantMisResp = module.exports.BatchatchGetGrantMisResp = function(args) {
  this.status = null;
  this.misAppkeys = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.misAppkeys !== undefined) {
      this.misAppkeys = args.misAppkeys;
    }
  }
};
BatchatchGetGrantMisResp.prototype = {};
BatchatchGetGrantMisResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size212 = 0;
        var _rtmp3216;
        this.misAppkeys = [];
        var _etype215 = 0;
        _rtmp3216 = input.readListBegin();
        _etype215 = _rtmp3216.etype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var elem218 = null;
          elem218 = new ttypes.MisAppkeyTO();
          elem218.read(input);
          this.misAppkeys.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchatchGetGrantMisResp.prototype.write = function(output) {
  output.writeStructBegin('BatchatchGetGrantMisResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.misAppkeys !== null && this.misAppkeys !== undefined) {
    output.writeFieldBegin('misAppkeys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.misAppkeys.length);
    for (var iter219 in this.misAppkeys)
    {
      if (this.misAppkeys.hasOwnProperty(iter219))
      {
        iter219 = this.misAppkeys[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFeConfigResp = module.exports.GetFeConfigResp = function(args) {
  this.status = null;
  this.feConfig = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.feConfig !== undefined) {
      this.feConfig = args.feConfig;
    }
  }
};
GetFeConfigResp.prototype = {};
GetFeConfigResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.feConfig = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFeConfigResp.prototype.write = function(output) {
  output.writeStructBegin('GetFeConfigResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.feConfig !== null && this.feConfig !== undefined) {
    output.writeFieldBegin('feConfig', Thrift.Type.STRING, 2);
    output.writeString(this.feConfig);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetFeConfigReq = module.exports.GetFeConfigReq = function(args) {
  this.feConfigKey = null;
  if (args) {
    if (args.feConfigKey !== undefined) {
      this.feConfigKey = args.feConfigKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field feConfigKey is unset!');
    }
  }
};
GetFeConfigReq.prototype = {};
GetFeConfigReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.feConfigKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetFeConfigReq.prototype.write = function(output) {
  output.writeStructBegin('GetFeConfigReq');
  if (this.feConfigKey !== null && this.feConfigKey !== undefined) {
    output.writeFieldBegin('feConfigKey', Thrift.Type.STRING, 1);
    output.writeString(this.feConfigKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

