//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')


var ttypes = module.exports = {};
var BatchTaskTO = module.exports.BatchTaskTO = function(args) {
  this.id = null;
  this.type = null;
  this.misId = null;
  this.inputFileId = null;
  this.outputFileId = null;
  this.resultCode = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.misId !== undefined) {
      this.misId = args.misId;
    }
    if (args.inputFileId !== undefined) {
      this.inputFileId = args.inputFileId;
    }
    if (args.outputFileId !== undefined) {
      this.outputFileId = args.outputFileId;
    }
    if (args.resultCode !== undefined) {
      this.resultCode = args.resultCode;
    }
  }
};
BatchTaskTO.prototype = {};
BatchTaskTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.misId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.inputFileId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.outputFileId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.resultCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchTaskTO.prototype.write = function(output) {
  output.writeStructBegin('BatchTaskTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.misId !== null && this.misId !== undefined) {
    output.writeFieldBegin('misId', Thrift.Type.I32, 3);
    output.writeI32(this.misId);
    output.writeFieldEnd();
  }
  if (this.inputFileId !== null && this.inputFileId !== undefined) {
    output.writeFieldBegin('inputFileId', Thrift.Type.STRING, 4);
    output.writeString(this.inputFileId);
    output.writeFieldEnd();
  }
  if (this.outputFileId !== null && this.outputFileId !== undefined) {
    output.writeFieldBegin('outputFileId', Thrift.Type.STRING, 5);
    output.writeString(this.outputFileId);
    output.writeFieldEnd();
  }
  if (this.resultCode !== null && this.resultCode !== undefined) {
    output.writeFieldBegin('resultCode', Thrift.Type.I32, 6);
    output.writeI32(this.resultCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBatchTaskReq = module.exports.CreateBatchTaskReq = function(args) {
  this.batchTask = null;
  if (args) {
    if (args.batchTask !== undefined) {
      this.batchTask = args.batchTask;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field batchTask is unset!');
    }
  }
};
CreateBatchTaskReq.prototype = {};
CreateBatchTaskReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.batchTask = new ttypes.BatchTaskTO();
        this.batchTask.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBatchTaskReq.prototype.write = function(output) {
  output.writeStructBegin('CreateBatchTaskReq');
  if (this.batchTask !== null && this.batchTask !== undefined) {
    output.writeFieldBegin('batchTask', Thrift.Type.STRUCT, 1);
    this.batchTask.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBatchTaskResp = module.exports.CreateBatchTaskResp = function(args) {
  this.status = null;
  this.id = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
CreateBatchTaskResp.prototype = {};
CreateBatchTaskResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBatchTaskResp.prototype.write = function(output) {
  output.writeStructBegin('CreateBatchTaskResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBatchTaskReq = module.exports.ModifyBatchTaskReq = function(args) {
  this.batchTask = null;
  if (args) {
    if (args.batchTask !== undefined) {
      this.batchTask = args.batchTask;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field batchTask is unset!');
    }
  }
};
ModifyBatchTaskReq.prototype = {};
ModifyBatchTaskReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.batchTask = new ttypes.BatchTaskTO();
        this.batchTask.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBatchTaskReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBatchTaskReq');
  if (this.batchTask !== null && this.batchTask !== undefined) {
    output.writeFieldBegin('batchTask', Thrift.Type.STRUCT, 1);
    this.batchTask.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBatchTaskByTaskIdReq = module.exports.GetBatchTaskByTaskIdReq = function(args) {
  this.taskId = null;
  if (args) {
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taskId is unset!');
    }
  }
};
GetBatchTaskByTaskIdReq.prototype = {};
GetBatchTaskByTaskIdReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.taskId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBatchTaskByTaskIdReq.prototype.write = function(output) {
  output.writeStructBegin('GetBatchTaskByTaskIdReq');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.I32, 1);
    output.writeI32(this.taskId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBatchTaskByTaskIdResp = module.exports.GetBatchTaskByTaskIdResp = function(args) {
  this.status = null;
  this.batchTask = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.batchTask !== undefined) {
      this.batchTask = args.batchTask;
    }
  }
};
GetBatchTaskByTaskIdResp.prototype = {};
GetBatchTaskByTaskIdResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.batchTask = new ttypes.BatchTaskTO();
        this.batchTask.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBatchTaskByTaskIdResp.prototype.write = function(output) {
  output.writeStructBegin('GetBatchTaskByTaskIdResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.batchTask !== null && this.batchTask !== undefined) {
    output.writeFieldBegin('batchTask', Thrift.Type.STRUCT, 2);
    this.batchTask.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

