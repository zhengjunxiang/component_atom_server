//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')
var BizAccountModel_ttypes = require('./BizAccountModel_types')
var BizTokenModel_ttypes = require('./BizTokenModel_types')


var ttypes = module.exports = {};
var GenerateRandomPasswordReq = module.exports.GenerateRandomPasswordReq = function(args) {
  this.length = null;
  this.login = null;
  if (args) {
    if (args.length !== undefined) {
      this.length = args.length;
    }
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
GenerateRandomPasswordReq.prototype = {};
GenerateRandomPasswordReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.length = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GenerateRandomPasswordReq.prototype.write = function(output) {
  output.writeStructBegin('GenerateRandomPasswordReq');
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I32, 1);
    output.writeI32(this.length);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBizAccountReq = module.exports.CreateBizAccountReq = function(args) {
  this.createdFields = null;
  this.returnFields = null;
  this.logFields = null;
  this.randPassword = null;
  this.sendSms = null;
  this.smsTemplate = null;
  this.smsTemplateId = null;
  this.pthd = null;
  if (args) {
    if (args.createdFields !== undefined) {
      this.createdFields = args.createdFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createdFields is unset!');
    }
    if (args.returnFields !== undefined) {
      this.returnFields = args.returnFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnFields is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.randPassword !== undefined) {
      this.randPassword = args.randPassword;
    }
    if (args.sendSms !== undefined) {
      this.sendSms = args.sendSms;
    }
    if (args.smsTemplate !== undefined) {
      this.smsTemplate = args.smsTemplate;
    }
    if (args.smsTemplateId !== undefined) {
      this.smsTemplateId = args.smsTemplateId;
    }
    if (args.pthd !== undefined) {
      this.pthd = args.pthd;
    }
  }
};
CreateBizAccountReq.prototype = {};
CreateBizAccountReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.createdFields = new BizAccountModel_ttypes.BizAccountCreatedFieldsTO();
        this.createdFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnFields = new BizAccountModel_ttypes.BizAccountFields();
        this.returnFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTO();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.randPassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sendSms = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.smsTemplate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.smsTemplateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.pthd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBizAccountReq.prototype.write = function(output) {
  output.writeStructBegin('CreateBizAccountReq');
  if (this.createdFields !== null && this.createdFields !== undefined) {
    output.writeFieldBegin('createdFields', Thrift.Type.STRUCT, 1);
    this.createdFields.write(output);
    output.writeFieldEnd();
  }
  if (this.returnFields !== null && this.returnFields !== undefined) {
    output.writeFieldBegin('returnFields', Thrift.Type.STRUCT, 2);
    this.returnFields.write(output);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.randPassword !== null && this.randPassword !== undefined) {
    output.writeFieldBegin('randPassword', Thrift.Type.BOOL, 4);
    output.writeBool(this.randPassword);
    output.writeFieldEnd();
  }
  if (this.sendSms !== null && this.sendSms !== undefined) {
    output.writeFieldBegin('sendSms', Thrift.Type.BOOL, 5);
    output.writeBool(this.sendSms);
    output.writeFieldEnd();
  }
  if (this.smsTemplate !== null && this.smsTemplate !== undefined) {
    output.writeFieldBegin('smsTemplate', Thrift.Type.STRING, 6);
    output.writeString(this.smsTemplate);
    output.writeFieldEnd();
  }
  if (this.smsTemplateId !== null && this.smsTemplateId !== undefined) {
    output.writeFieldBegin('smsTemplateId', Thrift.Type.I32, 7);
    output.writeI32(this.smsTemplateId);
    output.writeFieldEnd();
  }
  if (this.pthd !== null && this.pthd !== undefined) {
    output.writeFieldBegin('pthd', Thrift.Type.STRING, 8);
    output.writeString(this.pthd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchCreateBizAccountReq = module.exports.BatchCreateBizAccountReq = function(args) {
  this.createdFields = null;
  this.returnFields = null;
  this.logFields = null;
  this.randPassword = null;
  this.sendSms = null;
  this.smsTemplate = null;
  this.smsTemplateId = null;
  this.pthd = null;
  if (args) {
    if (args.createdFields !== undefined) {
      this.createdFields = args.createdFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createdFields is unset!');
    }
    if (args.returnFields !== undefined) {
      this.returnFields = args.returnFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnFields is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.randPassword !== undefined) {
      this.randPassword = args.randPassword;
    }
    if (args.sendSms !== undefined) {
      this.sendSms = args.sendSms;
    }
    if (args.smsTemplate !== undefined) {
      this.smsTemplate = args.smsTemplate;
    }
    if (args.smsTemplateId !== undefined) {
      this.smsTemplateId = args.smsTemplateId;
    }
    if (args.pthd !== undefined) {
      this.pthd = args.pthd;
    }
  }
};
BatchCreateBizAccountReq.prototype = {};
BatchCreateBizAccountReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.createdFields = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new BizAccountModel_ttypes.BizAccountCreatedFieldsTO();
          elem6.read(input);
          this.createdFields.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnFields = new BizAccountModel_ttypes.BizAccountFields();
        this.returnFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTO();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.randPassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sendSms = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.smsTemplate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.smsTemplateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.pthd = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchCreateBizAccountReq.prototype.write = function(output) {
  output.writeStructBegin('BatchCreateBizAccountReq');
  if (this.createdFields !== null && this.createdFields !== undefined) {
    output.writeFieldBegin('createdFields', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.createdFields.length);
    for (var iter7 in this.createdFields)
    {
      if (this.createdFields.hasOwnProperty(iter7))
      {
        iter7 = this.createdFields[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.returnFields !== null && this.returnFields !== undefined) {
    output.writeFieldBegin('returnFields', Thrift.Type.STRUCT, 2);
    this.returnFields.write(output);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.randPassword !== null && this.randPassword !== undefined) {
    output.writeFieldBegin('randPassword', Thrift.Type.BOOL, 4);
    output.writeBool(this.randPassword);
    output.writeFieldEnd();
  }
  if (this.sendSms !== null && this.sendSms !== undefined) {
    output.writeFieldBegin('sendSms', Thrift.Type.BOOL, 5);
    output.writeBool(this.sendSms);
    output.writeFieldEnd();
  }
  if (this.smsTemplate !== null && this.smsTemplate !== undefined) {
    output.writeFieldBegin('smsTemplate', Thrift.Type.STRING, 6);
    output.writeString(this.smsTemplate);
    output.writeFieldEnd();
  }
  if (this.smsTemplateId !== null && this.smsTemplateId !== undefined) {
    output.writeFieldBegin('smsTemplateId', Thrift.Type.I32, 7);
    output.writeI32(this.smsTemplateId);
    output.writeFieldEnd();
  }
  if (this.pthd !== null && this.pthd !== undefined) {
    output.writeFieldBegin('pthd', Thrift.Type.STRING, 8);
    output.writeString(this.pthd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBizAccountResultTO = module.exports.CreateBizAccountResultTO = function(args) {
  this.resultCode = null;
  this.message = null;
  this.login = null;
  this.bizAcct = null;
  if (args) {
    if (args.resultCode !== undefined) {
      this.resultCode = args.resultCode;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field resultCode is unset!');
    }
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.bizAcct !== undefined) {
      this.bizAcct = args.bizAcct;
    }
  }
};
CreateBizAccountResultTO.prototype = {};
CreateBizAccountResultTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.resultCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.bizAcct = new BizAccountModel_ttypes.BizAccountTO();
        this.bizAcct.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBizAccountResultTO.prototype.write = function(output) {
  output.writeStructBegin('CreateBizAccountResultTO');
  if (this.resultCode !== null && this.resultCode !== undefined) {
    output.writeFieldBegin('resultCode', Thrift.Type.I32, 1);
    output.writeI32(this.resultCode);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 3);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.bizAcct !== null && this.bizAcct !== undefined) {
    output.writeFieldBegin('bizAcct', Thrift.Type.STRUCT, 4);
    this.bizAcct.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchCreateBizAccountResp = module.exports.BatchCreateBizAccountResp = function(args) {
  this.status = null;
  this.resultTOs = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.resultTOs !== undefined) {
      this.resultTOs = args.resultTOs;
    }
  }
};
BatchCreateBizAccountResp.prototype = {};
BatchCreateBizAccountResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.resultTOs = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.CreateBizAccountResultTO();
          elem14.read(input);
          this.resultTOs.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchCreateBizAccountResp.prototype.write = function(output) {
  output.writeStructBegin('BatchCreateBizAccountResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.resultTOs !== null && this.resultTOs !== undefined) {
    output.writeFieldBegin('resultTOs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.resultTOs.length);
    for (var iter15 in this.resultTOs)
    {
      if (this.resultTOs.hasOwnProperty(iter15))
      {
        iter15 = this.resultTOs[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBizAccountEmailReq = module.exports.CreateBizAccountEmailReq = function(args) {
  this.createdFields = null;
  this.returnFields = null;
  this.email = null;
  this.logFields = null;
  this.randPassword = null;
  this.sendSms = null;
  this.smsTemplate = null;
  this.smsTemplateId = null;
  if (args) {
    if (args.createdFields !== undefined) {
      this.createdFields = args.createdFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field createdFields is unset!');
    }
    if (args.returnFields !== undefined) {
      this.returnFields = args.returnFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field returnFields is unset!');
    }
    if (args.email !== undefined) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.randPassword !== undefined) {
      this.randPassword = args.randPassword;
    }
    if (args.sendSms !== undefined) {
      this.sendSms = args.sendSms;
    }
    if (args.smsTemplate !== undefined) {
      this.smsTemplate = args.smsTemplate;
    }
    if (args.smsTemplateId !== undefined) {
      this.smsTemplateId = args.smsTemplateId;
    }
  }
};
CreateBizAccountEmailReq.prototype = {};
CreateBizAccountEmailReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.createdFields = new BizAccountModel_ttypes.BizAccountCreatedFieldsTO();
        this.createdFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnFields = new BizAccountModel_ttypes.BizAccountFields();
        this.returnFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.randPassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.sendSms = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.smsTemplate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.smsTemplateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBizAccountEmailReq.prototype.write = function(output) {
  output.writeStructBegin('CreateBizAccountEmailReq');
  if (this.createdFields !== null && this.createdFields !== undefined) {
    output.writeFieldBegin('createdFields', Thrift.Type.STRUCT, 1);
    this.createdFields.write(output);
    output.writeFieldEnd();
  }
  if (this.returnFields !== null && this.returnFields !== undefined) {
    output.writeFieldBegin('returnFields', Thrift.Type.STRUCT, 2);
    this.returnFields.write(output);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 4);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.randPassword !== null && this.randPassword !== undefined) {
    output.writeFieldBegin('randPassword', Thrift.Type.BOOL, 5);
    output.writeBool(this.randPassword);
    output.writeFieldEnd();
  }
  if (this.sendSms !== null && this.sendSms !== undefined) {
    output.writeFieldBegin('sendSms', Thrift.Type.BOOL, 6);
    output.writeBool(this.sendSms);
    output.writeFieldEnd();
  }
  if (this.smsTemplate !== null && this.smsTemplate !== undefined) {
    output.writeFieldBegin('smsTemplate', Thrift.Type.STRING, 7);
    output.writeString(this.smsTemplate);
    output.writeFieldEnd();
  }
  if (this.smsTemplateId !== null && this.smsTemplateId !== undefined) {
    output.writeFieldBegin('smsTemplateId', Thrift.Type.I32, 8);
    output.writeI32(this.smsTemplateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizAccountReq = module.exports.ModifyBizAccountReq = function(args) {
  this.id = null;
  this.modifiedFields = null;
  this.logFields = null;
  this.randPassword = null;
  this.sendSms = null;
  this.dpID = null;
  this.unbindMobile = null;
  this.logoutBizAccount = null;
  this.smsTemplateId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.modifiedFields !== undefined) {
      this.modifiedFields = args.modifiedFields;
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.randPassword !== undefined) {
      this.randPassword = args.randPassword;
    }
    if (args.sendSms !== undefined) {
      this.sendSms = args.sendSms;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
    if (args.unbindMobile !== undefined) {
      this.unbindMobile = args.unbindMobile;
    }
    if (args.logoutBizAccount !== undefined) {
      this.logoutBizAccount = args.logoutBizAccount;
    }
    if (args.smsTemplateId !== undefined) {
      this.smsTemplateId = args.smsTemplateId;
    }
  }
};
ModifyBizAccountReq.prototype = {};
ModifyBizAccountReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifiedFields = new BizAccountModel_ttypes.BizAccountModifiedFieldsTO();
        this.modifiedFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTO();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.randPassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sendSms = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.unbindMobile = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.logoutBizAccount = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.smsTemplateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizAccountReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizAccountReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.modifiedFields !== null && this.modifiedFields !== undefined) {
    output.writeFieldBegin('modifiedFields', Thrift.Type.STRUCT, 2);
    this.modifiedFields.write(output);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.randPassword !== null && this.randPassword !== undefined) {
    output.writeFieldBegin('randPassword', Thrift.Type.BOOL, 4);
    output.writeBool(this.randPassword);
    output.writeFieldEnd();
  }
  if (this.sendSms !== null && this.sendSms !== undefined) {
    output.writeFieldBegin('sendSms', Thrift.Type.BOOL, 5);
    output.writeBool(this.sendSms);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 6);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  if (this.unbindMobile !== null && this.unbindMobile !== undefined) {
    output.writeFieldBegin('unbindMobile', Thrift.Type.BOOL, 7);
    output.writeBool(this.unbindMobile);
    output.writeFieldEnd();
  }
  if (this.logoutBizAccount !== null && this.logoutBizAccount !== undefined) {
    output.writeFieldBegin('logoutBizAccount', Thrift.Type.BOOL, 8);
    output.writeBool(this.logoutBizAccount);
    output.writeFieldEnd();
  }
  if (this.smsTemplateId !== null && this.smsTemplateId !== undefined) {
    output.writeFieldBegin('smsTemplateId', Thrift.Type.I32, 9);
    output.writeI32(this.smsTemplateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnbindMobileReq = module.exports.UnbindMobileReq = function(args) {
  this.id = null;
  this.logFields = null;
  this.dpID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
  }
};
UnbindMobileReq.prototype = {};
UnbindMobileReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnbindMobileReq.prototype.write = function(output) {
  output.writeStructBegin('UnbindMobileReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 2);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 3);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizAccountOpReq = module.exports.ModifyBizAccountOpReq = function(args) {
  this.id = null;
  this.modifiedFields = null;
  this.logFields = null;
  this.sendSms = null;
  this.dpID = null;
  this.smsTemplateId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.modifiedFields !== undefined) {
      this.modifiedFields = args.modifiedFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modifiedFields is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
    if (args.sendSms !== undefined) {
      this.sendSms = args.sendSms;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
    if (args.smsTemplateId !== undefined) {
      this.smsTemplateId = args.smsTemplateId;
    }
  }
};
ModifyBizAccountOpReq.prototype = {};
ModifyBizAccountOpReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifiedFields = new BizAccountModel_ttypes.BizAccountModifiedFieldsTO();
        this.modifiedFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sendSms = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.smsTemplateId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizAccountOpReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizAccountOpReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.modifiedFields !== null && this.modifiedFields !== undefined) {
    output.writeFieldBegin('modifiedFields', Thrift.Type.STRUCT, 2);
    this.modifiedFields.write(output);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.sendSms !== null && this.sendSms !== undefined) {
    output.writeFieldBegin('sendSms', Thrift.Type.BOOL, 4);
    output.writeBool(this.sendSms);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 5);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  if (this.smsTemplateId !== null && this.smsTemplateId !== undefined) {
    output.writeFieldBegin('smsTemplateId', Thrift.Type.I32, 6);
    output.writeI32(this.smsTemplateId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizAccountLoginReq = module.exports.ModifyBizAccountLoginReq = function(args) {
  this.id = null;
  this.login = null;
  this.logFields = null;
  this.dpID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
  }
};
ModifyBizAccountLoginReq.prototype = {};
ModifyBizAccountLoginReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTO();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizAccountLoginReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizAccountLoginReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 4);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizAccountLoginReqV2 = module.exports.ModifyBizAccountLoginReqV2 = function(args) {
  this.id = null;
  this.login = null;
  this.logFields = null;
  this.dpID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
  }
};
ModifyBizAccountLoginReqV2.prototype = {};
ModifyBizAccountLoginReqV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizAccountLoginReqV2.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizAccountLoginReqV2');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 4);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizAccountLoginOnlyForSdkReq = module.exports.ModifyBizAccountLoginOnlyForSdkReq = function(args) {
  this.id = null;
  this.modifiedFields = null;
  this.logFields = null;
  this.randPassword = null;
  this.sendSms = null;
  this.dpID = null;
  this.unbindMobile = null;
  this.logoutBizAccount = null;
  this.login = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.modifiedFields !== undefined) {
      this.modifiedFields = args.modifiedFields;
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.randPassword !== undefined) {
      this.randPassword = args.randPassword;
    }
    if (args.sendSms !== undefined) {
      this.sendSms = args.sendSms;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
    if (args.unbindMobile !== undefined) {
      this.unbindMobile = args.unbindMobile;
    }
    if (args.logoutBizAccount !== undefined) {
      this.logoutBizAccount = args.logoutBizAccount;
    }
    if (args.login !== undefined) {
      this.login = args.login;
    }
  }
};
ModifyBizAccountLoginOnlyForSdkReq.prototype = {};
ModifyBizAccountLoginOnlyForSdkReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifiedFields = new BizAccountModel_ttypes.BizAccountModifiedFieldsTO();
        this.modifiedFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTO();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.randPassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.sendSms = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.unbindMobile = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.logoutBizAccount = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizAccountLoginOnlyForSdkReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizAccountLoginOnlyForSdkReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.modifiedFields !== null && this.modifiedFields !== undefined) {
    output.writeFieldBegin('modifiedFields', Thrift.Type.STRUCT, 2);
    this.modifiedFields.write(output);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.randPassword !== null && this.randPassword !== undefined) {
    output.writeFieldBegin('randPassword', Thrift.Type.BOOL, 4);
    output.writeBool(this.randPassword);
    output.writeFieldEnd();
  }
  if (this.sendSms !== null && this.sendSms !== undefined) {
    output.writeFieldBegin('sendSms', Thrift.Type.BOOL, 5);
    output.writeBool(this.sendSms);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 6);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  if (this.unbindMobile !== null && this.unbindMobile !== undefined) {
    output.writeFieldBegin('unbindMobile', Thrift.Type.BOOL, 7);
    output.writeBool(this.unbindMobile);
    output.writeFieldEnd();
  }
  if (this.logoutBizAccount !== null && this.logoutBizAccount !== undefined) {
    output.writeFieldBegin('logoutBizAccount', Thrift.Type.BOOL, 8);
    output.writeBool(this.logoutBizAccount);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 9);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EnableBizAccountReq = module.exports.EnableBizAccountReq = function(args) {
  this.id = null;
  this.enable = null;
  this.logFields = null;
  this.dpID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.enable !== undefined) {
      this.enable = args.enable;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field enable is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
  }
};
EnableBizAccountReq.prototype = {};
EnableBizAccountReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTO();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnableBizAccountReq.prototype.write = function(output) {
  output.writeStructBegin('EnableBizAccountReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 2);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 4);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EnableBizAccountReqV2 = module.exports.EnableBizAccountReqV2 = function(args) {
  this.id = null;
  this.enable = null;
  this.logFields = null;
  this.dpID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.enable !== undefined) {
      this.enable = args.enable;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field enable is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
  }
};
EnableBizAccountReqV2.prototype = {};
EnableBizAccountReqV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EnableBizAccountReqV2.prototype.write = function(output) {
  output.writeStructBegin('EnableBizAccountReqV2');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 2);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 5);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchEnableBizAccountReq = module.exports.BatchEnableBizAccountReq = function(args) {
  this.ids = null;
  this.dpIds = null;
  this.enable = null;
  this.logFields = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.dpIds !== undefined) {
      this.dpIds = args.dpIds;
    }
    if (args.enable !== undefined) {
      this.enable = args.enable;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field enable is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
  }
};
BatchEnableBizAccountReq.prototype = {};
BatchEnableBizAccountReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.ids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readI32();
          this.ids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.dpIds = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readI32();
          this.dpIds.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.enable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchEnableBizAccountReq.prototype.write = function(output) {
  output.writeStructBegin('BatchEnableBizAccountReq');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter30 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter30))
      {
        iter30 = this.ids[iter30];
        output.writeI32(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dpIds !== null && this.dpIds !== undefined) {
    output.writeFieldBegin('dpIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.dpIds.length);
    for (var iter31 in this.dpIds)
    {
      if (this.dpIds.hasOwnProperty(iter31))
      {
        iter31 = this.dpIds[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.enable !== null && this.enable !== undefined) {
    output.writeFieldBegin('enable', Thrift.Type.BOOL, 3);
    output.writeBool(this.enable);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 4);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogoutByTokenReq = module.exports.LogoutByTokenReq = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
LogoutByTokenReq.prototype = {};
LogoutByTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogoutByTokenReq.prototype.write = function(output) {
  output.writeStructBegin('LogoutByTokenReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogoutOtherByTokenReq = module.exports.LogoutOtherByTokenReq = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
LogoutOtherByTokenReq.prototype = {};
LogoutOtherByTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogoutOtherByTokenReq.prototype.write = function(output) {
  output.writeStructBegin('LogoutOtherByTokenReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogoutByBizTokenReq = module.exports.LogoutByBizTokenReq = function(args) {
  this.bizTokenID = null;
  if (args) {
    if (args.bizTokenID !== undefined) {
      this.bizTokenID = args.bizTokenID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizTokenID is unset!');
    }
  }
};
LogoutByBizTokenReq.prototype = {};
LogoutByBizTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.bizTokenID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogoutByBizTokenReq.prototype.write = function(output) {
  output.writeStructBegin('LogoutByBizTokenReq');
  if (this.bizTokenID !== null && this.bizTokenID !== undefined) {
    output.writeFieldBegin('bizTokenID', Thrift.Type.I64, 1);
    output.writeI64(this.bizTokenID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogoutByBizAccountReq = module.exports.LogoutByBizAccountReq = function(args) {
  this.bizAcctID = null;
  if (args) {
    if (args.bizAcctID !== undefined) {
      this.bizAcctID = args.bizAcctID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctID is unset!');
    }
  }
};
LogoutByBizAccountReq.prototype = {};
LogoutByBizAccountReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogoutByBizAccountReq.prototype.write = function(output) {
  output.writeStructBegin('LogoutByBizAccountReq');
  if (this.bizAcctID !== null && this.bizAcctID !== undefined) {
    output.writeFieldBegin('bizAcctID', Thrift.Type.I32, 1);
    output.writeI32(this.bizAcctID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateTokenReq = module.exports.CreateTokenReq = function(args) {
  this.bizAcctID = null;
  this.appkey = null;
  this.ip = null;
  this.aclUserID = null;
  this.aclBizAcctID = null;
  this.loginType = null;
  this.platform = null;
  if (args) {
    if (args.bizAcctID !== undefined) {
      this.bizAcctID = args.bizAcctID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctID is unset!');
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.aclUserID !== undefined) {
      this.aclUserID = args.aclUserID;
    }
    if (args.aclBizAcctID !== undefined) {
      this.aclBizAcctID = args.aclBizAcctID;
    }
    if (args.loginType !== undefined) {
      this.loginType = args.loginType;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
  }
};
CreateTokenReq.prototype = {};
CreateTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.aclUserID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.aclBizAcctID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.loginType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTokenReq.prototype.write = function(output) {
  output.writeStructBegin('CreateTokenReq');
  if (this.bizAcctID !== null && this.bizAcctID !== undefined) {
    output.writeFieldBegin('bizAcctID', Thrift.Type.I32, 1);
    output.writeI32(this.bizAcctID);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 3);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.aclUserID !== null && this.aclUserID !== undefined) {
    output.writeFieldBegin('aclUserID', Thrift.Type.I32, 4);
    output.writeI32(this.aclUserID);
    output.writeFieldEnd();
  }
  if (this.aclBizAcctID !== null && this.aclBizAcctID !== undefined) {
    output.writeFieldBegin('aclBizAcctID', Thrift.Type.I32, 5);
    output.writeI32(this.aclBizAcctID);
    output.writeFieldEnd();
  }
  if (this.loginType !== null && this.loginType !== undefined) {
    output.writeFieldBegin('loginType', Thrift.Type.I32, 6);
    output.writeI32(this.loginType);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 7);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RefreshTokenReq = module.exports.RefreshTokenReq = function(args) {
  this.accessToken = null;
  this.refreshToken = null;
  this.ip = null;
  this.utmParamTO = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.refreshToken !== undefined) {
      this.refreshToken = args.refreshToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refreshToken is unset!');
    }
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.utmParamTO !== undefined) {
      this.utmParamTO = args.utmParamTO;
    }
  }
};
RefreshTokenReq.prototype = {};
RefreshTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.refreshToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.utmParamTO = new CommonModel_ttypes.UtmParamTO();
        this.utmParamTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RefreshTokenReq.prototype.write = function(output) {
  output.writeStructBegin('RefreshTokenReq');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.refreshToken !== null && this.refreshToken !== undefined) {
    output.writeFieldBegin('refreshToken', Thrift.Type.STRING, 2);
    output.writeString(this.refreshToken);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 3);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.utmParamTO !== null && this.utmParamTO !== undefined) {
    output.writeFieldBegin('utmParamTO', Thrift.Type.STRUCT, 4);
    this.utmParamTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckLoginValidReq = module.exports.CheckLoginValidReq = function(args) {
  this.login = null;
  this.partType = null;
  this.partKey = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.partType !== undefined) {
      this.partType = args.partType;
    }
    if (args.partKey !== undefined) {
      this.partKey = args.partKey;
    }
  }
};
CheckLoginValidReq.prototype = {};
CheckLoginValidReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.partType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.partKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckLoginValidReq.prototype.write = function(output) {
  output.writeStructBegin('CheckLoginValidReq');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.I32, 2);
    output.writeI32(this.partType);
    output.writeFieldEnd();
  }
  if (this.partKey !== null && this.partKey !== undefined) {
    output.writeFieldBegin('partKey', Thrift.Type.STRING, 3);
    output.writeString(this.partKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizEmailReq = module.exports.ModifyBizEmailReq = function(args) {
  this.id = null;
  this.email = null;
  this.logFields = null;
  this.dpID = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.email !== undefined) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
  }
};
ModifyBizEmailReq.prototype = {};
ModifyBizEmailReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizEmailReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizEmailReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 3);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 5);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GenerateRandomPasswordResp = module.exports.GenerateRandomPasswordResp = function(args) {
  this.status = null;
  this.randomPassword = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.randomPassword !== undefined) {
      this.randomPassword = args.randomPassword;
    }
  }
};
GenerateRandomPasswordResp.prototype = {};
GenerateRandomPasswordResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.randomPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GenerateRandomPasswordResp.prototype.write = function(output) {
  output.writeStructBegin('GenerateRandomPasswordResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.randomPassword !== null && this.randomPassword !== undefined) {
    output.writeFieldBegin('randomPassword', Thrift.Type.STRING, 2);
    output.writeString(this.randomPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBizAccountResp = module.exports.CreateBizAccountResp = function(args) {
  this.status = null;
  this.bizAccount = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizAccount !== undefined) {
      this.bizAccount = args.bizAccount;
    }
  }
};
CreateBizAccountResp.prototype = {};
CreateBizAccountResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bizAccount = new BizAccountModel_ttypes.BizAccountTO();
        this.bizAccount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBizAccountResp.prototype.write = function(output) {
  output.writeStructBegin('CreateBizAccountResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizAccount !== null && this.bizAccount !== undefined) {
    output.writeFieldBegin('bizAccount', Thrift.Type.STRUCT, 2);
    this.bizAccount.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateTokenResp = module.exports.CreateTokenResp = function(args) {
  this.status = null;
  this.token = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
CreateTokenResp.prototype = {};
CreateTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new BizTokenModel_ttypes.TokenRespTO();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateTokenResp.prototype.write = function(output) {
  output.writeStructBegin('CreateTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RefreshTokenResp = module.exports.RefreshTokenResp = function(args) {
  this.status = null;
  this.token = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
RefreshTokenResp.prototype = {};
RefreshTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new BizTokenModel_ttypes.TokenRespTO();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RefreshTokenResp.prototype.write = function(output) {
  output.writeStructBegin('RefreshTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBsidTokenResp = module.exports.CreateBsidTokenResp = function(args) {
  this.status = null;
  this.token = null;
  this.bizTokenID = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.bizTokenID !== undefined) {
      this.bizTokenID = args.bizTokenID;
    }
  }
};
CreateBsidTokenResp.prototype = {};
CreateBsidTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.bizTokenID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBsidTokenResp.prototype.write = function(output) {
  output.writeStructBegin('CreateBsidTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.bizTokenID !== null && this.bizTokenID !== undefined) {
    output.writeFieldBegin('bizTokenID', Thrift.Type.I64, 3);
    output.writeI64(this.bizTokenID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyBizAcctActiveReq = module.exports.ModifyBizAcctActiveReq = function(args) {
  this.id = null;
  this.logFields = null;
  this.activeType = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.logFields !== undefined) {
      this.logFields = args.logFields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field logFields is unset!');
    }
    if (args.activeType !== undefined) {
      this.activeType = args.activeType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field activeType is unset!');
    }
  }
};
ModifyBizAcctActiveReq.prototype = {};
ModifyBizAcctActiveReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.logFields = new BizAccountModel_ttypes.BizAccountLogTOV2();
        this.logFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.activeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyBizAcctActiveReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyBizAcctActiveReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.logFields !== null && this.logFields !== undefined) {
    output.writeFieldBegin('logFields', Thrift.Type.STRUCT, 2);
    this.logFields.write(output);
    output.writeFieldEnd();
  }
  if (this.activeType !== null && this.activeType !== undefined) {
    output.writeFieldBegin('activeType', Thrift.Type.I32, 3);
    output.writeI32(this.activeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccActiveReq = module.exports.BizAccActiveReq = function(args) {
  this.bizAcctIdList = null;
  if (args) {
    if (args.bizAcctIdList !== undefined) {
      this.bizAcctIdList = args.bizAcctIdList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctIdList is unset!');
    }
  }
};
BizAccActiveReq.prototype = {};
BizAccActiveReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.bizAcctIdList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readI32();
          this.bizAcctIdList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccActiveReq.prototype.write = function(output) {
  output.writeStructBegin('BizAccActiveReq');
  if (this.bizAcctIdList !== null && this.bizAcctIdList !== undefined) {
    output.writeFieldBegin('bizAcctIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.bizAcctIdList.length);
    for (var iter39 in this.bizAcctIdList)
    {
      if (this.bizAcctIdList.hasOwnProperty(iter39))
      {
        iter39 = this.bizAcctIdList[iter39];
        output.writeI32(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccActiveResp = module.exports.BizAccActiveResp = function(args) {
  this.status = null;
  this.activeMap = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.activeMap !== undefined) {
      this.activeMap = args.activeMap;
    }
  }
};
BizAccActiveResp.prototype = {};
BizAccActiveResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size40 = 0;
        var _rtmp344;
        this.activeMap = {};
        var _ktype41 = 0;
        var _vtype42 = 0;
        _rtmp344 = input.readMapBegin();
        _ktype41 = _rtmp344.ktype;
        _vtype42 = _rtmp344.vtype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var key46 = null;
          var val47 = null;
          key46 = input.readI32();
          val47 = input.readI32();
          this.activeMap[key46] = val47;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccActiveResp.prototype.write = function(output) {
  output.writeStructBegin('BizAccActiveResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.activeMap !== null && this.activeMap !== undefined) {
    output.writeFieldBegin('activeMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.I32, Thrift.objectLength(this.activeMap));
    for (var kiter48 in this.activeMap)
    {
      if (this.activeMap.hasOwnProperty(kiter48))
      {
        var viter49 = this.activeMap[kiter48];
        output.writeI32(kiter48);
        output.writeI32(viter49);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckPasswordLegalReq = module.exports.CheckPasswordLegalReq = function(args) {
  this.password = null;
  this.login = null;
  if (args) {
    if (args.password !== undefined) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
  }
};
CheckPasswordLegalReq.prototype = {};
CheckPasswordLegalReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckPasswordLegalReq.prototype.write = function(output) {
  output.writeStructBegin('CheckPasswordLegalReq');
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 1);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UniTokenTO = module.exports.UniTokenTO = function(args) {
  this.message = null;
  this.createTime = null;
  this.expireTime = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.expireTime !== undefined) {
      this.expireTime = args.expireTime;
    }
  }
};
UniTokenTO.prototype = {};
UniTokenTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expireTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UniTokenTO.prototype.write = function(output) {
  output.writeStructBegin('UniTokenTO');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 2);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.expireTime !== null && this.expireTime !== undefined) {
    output.writeFieldBegin('expireTime', Thrift.Type.I64, 3);
    output.writeI64(this.expireTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateUniTokenReq = module.exports.CreateUniTokenReq = function(args) {
  this.uniToken = null;
  if (args) {
    if (args.uniToken !== undefined) {
      this.uniToken = args.uniToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uniToken is unset!');
    }
  }
};
CreateUniTokenReq.prototype = {};
CreateUniTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uniToken = new ttypes.UniTokenTO();
        this.uniToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateUniTokenReq.prototype.write = function(output) {
  output.writeStructBegin('CreateUniTokenReq');
  if (this.uniToken !== null && this.uniToken !== undefined) {
    output.writeFieldBegin('uniToken', Thrift.Type.STRUCT, 1);
    this.uniToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateUniTokenResp = module.exports.CreateUniTokenResp = function(args) {
  this.status = null;
  this.uniToken = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.uniToken !== undefined) {
      this.uniToken = args.uniToken;
    }
  }
};
CreateUniTokenResp.prototype = {};
CreateUniTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uniToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateUniTokenResp.prototype.write = function(output) {
  output.writeStructBegin('CreateUniTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.uniToken !== null && this.uniToken !== undefined) {
    output.writeFieldBegin('uniToken', Thrift.Type.STRING, 2);
    output.writeString(this.uniToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

