//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')
var BizAccountModel_ttypes = require('./BizAccountModel_types')
var BizAccountAdminThriftServiceModel_ttypes = require('./BizAccountAdminThriftServiceModel_types')


var ttypes = module.exports = {};
var ValidateTokenReq = module.exports.ValidateTokenReq = function(args) {
  this.token = null;
  this.appkey = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
  }
};
ValidateTokenReq.prototype = {};
ValidateTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidateTokenReq.prototype.write = function(output) {
  output.writeStructBegin('ValidateTokenReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecryptTokenReq = module.exports.DecryptTokenReq = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
DecryptTokenReq.prototype = {};
DecryptTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecryptTokenReq.prototype.write = function(output) {
  output.writeStructBegin('DecryptTokenReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckPasswordByTokenReq = module.exports.CheckPasswordByTokenReq = function(args) {
  this.token = null;
  this.password = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.password !== undefined) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
CheckPasswordByTokenReq.prototype = {};
CheckPasswordByTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckPasswordByTokenReq.prototype.write = function(output) {
  output.writeStructBegin('CheckPasswordByTokenReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckPasswordByIDReq = module.exports.CheckPasswordByIDReq = function(args) {
  this.id = null;
  this.password = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.password !== undefined) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
CheckPasswordByIDReq.prototype = {};
CheckPasswordByIDReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckPasswordByIDReq.prototype.write = function(output) {
  output.writeStructBegin('CheckPasswordByIDReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CheckPasswordByDpIDReq = module.exports.CheckPasswordByDpIDReq = function(args) {
  this.dpID = null;
  this.password = null;
  if (args) {
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dpID is unset!');
    }
    if (args.password !== undefined) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
CheckPasswordByDpIDReq.prototype = {};
CheckPasswordByDpIDReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CheckPasswordByDpIDReq.prototype.write = function(output) {
  output.writeStructBegin('CheckPasswordByDpIDReq');
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 1);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccountByTokenReq = module.exports.GetBizAccountByTokenReq = function(args) {
  this.token = null;
  this.fields = null;
  this.aclUserID = null;
  this.aclBizAcctID = null;
  this.loginType = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
    if (args.aclUserID !== undefined) {
      this.aclUserID = args.aclUserID;
    }
    if (args.aclBizAcctID !== undefined) {
      this.aclBizAcctID = args.aclBizAcctID;
    }
    if (args.loginType !== undefined) {
      this.loginType = args.loginType;
    }
  }
};
GetBizAccountByTokenReq.prototype = {};
GetBizAccountByTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.aclUserID = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.aclBizAcctID = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.loginType = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccountByTokenReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccountByTokenReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.aclUserID !== null && this.aclUserID !== undefined) {
    output.writeFieldBegin('aclUserID', Thrift.Type.BOOL, 3);
    output.writeBool(this.aclUserID);
    output.writeFieldEnd();
  }
  if (this.aclBizAcctID !== null && this.aclBizAcctID !== undefined) {
    output.writeFieldBegin('aclBizAcctID', Thrift.Type.BOOL, 4);
    output.writeBool(this.aclBizAcctID);
    output.writeFieldEnd();
  }
  if (this.loginType !== null && this.loginType !== undefined) {
    output.writeFieldBegin('loginType', Thrift.Type.BOOL, 5);
    output.writeBool(this.loginType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccountByIDReq = module.exports.GetBizAccountByIDReq = function(args) {
  this.id = null;
  this.fields = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
  }
};
GetBizAccountByIDReq.prototype = {};
GetBizAccountByIDReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccountByIDReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccountByIDReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccountByDpIDReq = module.exports.GetBizAccountByDpIDReq = function(args) {
  this.dpID = null;
  this.fields = null;
  if (args) {
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dpID is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
  }
};
GetBizAccountByDpIDReq.prototype = {};
GetBizAccountByDpIDReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccountByDpIDReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccountByDpIDReq');
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 1);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccountByLoginReq = module.exports.GetBizAccountByLoginReq = function(args) {
  this.login = null;
  this.fields = null;
  this.partTO = null;
  this.findDpAcctFirst = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
    if (args.partTO !== undefined) {
      this.partTO = args.partTO;
    }
    if (args.findDpAcctFirst !== undefined) {
      this.findDpAcctFirst = args.findDpAcctFirst;
    }
  }
};
GetBizAccountByLoginReq.prototype = {};
GetBizAccountByLoginReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.partTO = new BizAccountModel_ttypes.BizAccountPartTO();
        this.partTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.findDpAcctFirst = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccountByLoginReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccountByLoginReq');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.partTO !== null && this.partTO !== undefined) {
    output.writeFieldBegin('partTO', Thrift.Type.STRUCT, 3);
    this.partTO.write(output);
    output.writeFieldEnd();
  }
  if (this.findDpAcctFirst !== null && this.findDpAcctFirst !== undefined) {
    output.writeFieldBegin('findDpAcctFirst', Thrift.Type.BOOL, 4);
    output.writeBool(this.findDpAcctFirst);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchGetBizAccountByIDListReq = module.exports.BatchGetBizAccountByIDListReq = function(args) {
  this.idList = null;
  this.fields = null;
  if (args) {
    if (args.idList !== undefined) {
      this.idList = args.idList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field idList is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
  }
};
BatchGetBizAccountByIDListReq.prototype = {};
BatchGetBizAccountByIDListReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.idList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.idList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetBizAccountByIDListReq.prototype.write = function(output) {
  output.writeStructBegin('BatchGetBizAccountByIDListReq');
  if (this.idList !== null && this.idList !== undefined) {
    output.writeFieldBegin('idList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.idList.length);
    for (var iter7 in this.idList)
    {
      if (this.idList.hasOwnProperty(iter7))
      {
        iter7 = this.idList[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchGetBizAccountByDpIDListReq = module.exports.BatchGetBizAccountByDpIDListReq = function(args) {
  this.dpIDList = null;
  this.fields = null;
  if (args) {
    if (args.dpIDList !== undefined) {
      this.dpIDList = args.dpIDList;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dpIDList is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
  }
};
BatchGetBizAccountByDpIDListReq.prototype = {};
BatchGetBizAccountByDpIDListReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.dpIDList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readI32();
          this.dpIDList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetBizAccountByDpIDListReq.prototype.write = function(output) {
  output.writeStructBegin('BatchGetBizAccountByDpIDListReq');
  if (this.dpIDList !== null && this.dpIDList !== undefined) {
    output.writeFieldBegin('dpIDList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.dpIDList.length);
    for (var iter15 in this.dpIDList)
    {
      if (this.dpIDList.hasOwnProperty(iter15))
      {
        iter15 = this.dpIDList[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchBizAccountByPhoneReq = module.exports.SearchBizAccountByPhoneReq = function(args) {
  this.phone = null;
  this.fields = null;
  this.interCode = null;
  this.partType = null;
  this.page = null;
  this.scope = null;
  if (args) {
    if (args.phone !== undefined) {
      this.phone = args.phone;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field phone is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.partType !== undefined) {
      this.partType = args.partType;
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
    if (args.scope !== undefined) {
      this.scope = args.scope;
    }
  }
};
SearchBizAccountByPhoneReq.prototype = {};
SearchBizAccountByPhoneReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.interCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.partType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new CommonModel_ttypes.PageModel();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchBizAccountByPhoneReq.prototype.write = function(output) {
  output.writeStructBegin('SearchBizAccountByPhoneReq');
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 1);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.STRING, 3);
    output.writeString(this.interCode);
    output.writeFieldEnd();
  }
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.I32, 4);
    output.writeI32(this.partType);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 5);
    this.page.write(output);
    output.writeFieldEnd();
  }
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 6);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchBizAccountByPartTOReq = module.exports.SearchBizAccountByPartTOReq = function(args) {
  this.partTO = null;
  this.fields = null;
  this.page = null;
  if (args) {
    if (args.partTO !== undefined) {
      this.partTO = args.partTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partTO is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
    if (args.page !== undefined) {
      this.page = args.page;
    }
  }
};
SearchBizAccountByPartTOReq.prototype = {};
SearchBizAccountByPartTOReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.partTO = new BizAccountModel_ttypes.BizAccountPartTO();
        this.partTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new CommonModel_ttypes.PageModel();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchBizAccountByPartTOReq.prototype.write = function(output) {
  output.writeStructBegin('SearchBizAccountByPartTOReq');
  if (this.partTO !== null && this.partTO !== undefined) {
    output.writeFieldBegin('partTO', Thrift.Type.STRUCT, 1);
    this.partTO.write(output);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 3);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ValidateTokenResp = module.exports.ValidateTokenResp = function(args) {
  this.status = null;
  this.id = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
ValidateTokenResp.prototype = {};
ValidateTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidateTokenResp.prototype.write = function(output) {
  output.writeStructBegin('ValidateTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecryptTokenResp = module.exports.DecryptTokenResp = function(args) {
  this.status = null;
  this.bizTokenID = null;
  this.createTime = null;
  this.bizAcctId = null;
  this.expireTime = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizTokenID !== undefined) {
      this.bizTokenID = args.bizTokenID;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.bizAcctId !== undefined) {
      this.bizAcctId = args.bizAcctId;
    }
    if (args.expireTime !== undefined) {
      this.expireTime = args.expireTime;
    }
  }
};
DecryptTokenResp.prototype = {};
DecryptTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bizTokenID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.createTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.expireTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecryptTokenResp.prototype.write = function(output) {
  output.writeStructBegin('DecryptTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizTokenID !== null && this.bizTokenID !== undefined) {
    output.writeFieldBegin('bizTokenID', Thrift.Type.I64, 2);
    output.writeI64(this.bizTokenID);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I32, 3);
    output.writeI32(this.createTime);
    output.writeFieldEnd();
  }
  if (this.bizAcctId !== null && this.bizAcctId !== undefined) {
    output.writeFieldBegin('bizAcctId', Thrift.Type.I32, 4);
    output.writeI32(this.bizAcctId);
    output.writeFieldEnd();
  }
  if (this.expireTime !== null && this.expireTime !== undefined) {
    output.writeFieldBegin('expireTime', Thrift.Type.I32, 5);
    output.writeI32(this.expireTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccountByTokenResp = module.exports.GetBizAccountByTokenResp = function(args) {
  this.status = null;
  this.bizAccount = null;
  this.aclUserID = null;
  this.aclBizAcctID = null;
  this.loginType = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizAccount !== undefined) {
      this.bizAccount = args.bizAccount;
    }
    if (args.aclUserID !== undefined) {
      this.aclUserID = args.aclUserID;
    }
    if (args.aclBizAcctID !== undefined) {
      this.aclBizAcctID = args.aclBizAcctID;
    }
    if (args.loginType !== undefined) {
      this.loginType = args.loginType;
    }
  }
};
GetBizAccountByTokenResp.prototype = {};
GetBizAccountByTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bizAccount = new BizAccountModel_ttypes.BizAccountTO();
        this.bizAccount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.aclUserID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.aclBizAcctID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.loginType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccountByTokenResp.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccountByTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizAccount !== null && this.bizAccount !== undefined) {
    output.writeFieldBegin('bizAccount', Thrift.Type.STRUCT, 2);
    this.bizAccount.write(output);
    output.writeFieldEnd();
  }
  if (this.aclUserID !== null && this.aclUserID !== undefined) {
    output.writeFieldBegin('aclUserID', Thrift.Type.I32, 3);
    output.writeI32(this.aclUserID);
    output.writeFieldEnd();
  }
  if (this.aclBizAcctID !== null && this.aclBizAcctID !== undefined) {
    output.writeFieldBegin('aclBizAcctID', Thrift.Type.I32, 4);
    output.writeI32(this.aclBizAcctID);
    output.writeFieldEnd();
  }
  if (this.loginType !== null && this.loginType !== undefined) {
    output.writeFieldBegin('loginType', Thrift.Type.I32, 5);
    output.writeI32(this.loginType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccountResp = module.exports.GetBizAccountResp = function(args) {
  this.status = null;
  this.bizAccount = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizAccount !== undefined) {
      this.bizAccount = args.bizAccount;
    }
  }
};
GetBizAccountResp.prototype = {};
GetBizAccountResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bizAccount = new BizAccountModel_ttypes.BizAccountTO();
        this.bizAccount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccountResp.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccountResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizAccount !== null && this.bizAccount !== undefined) {
    output.writeFieldBegin('bizAccount', Thrift.Type.STRUCT, 2);
    this.bizAccount.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetAllBizAccountsResp = module.exports.GetAllBizAccountsResp = function(args) {
  this.status = null;
  this.mtBizAccount = null;
  this.dpBizAccount = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.mtBizAccount !== undefined) {
      this.mtBizAccount = args.mtBizAccount;
    }
    if (args.dpBizAccount !== undefined) {
      this.dpBizAccount = args.dpBizAccount;
    }
  }
};
GetAllBizAccountsResp.prototype = {};
GetAllBizAccountsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mtBizAccount = new BizAccountModel_ttypes.BizAccountTO();
        this.mtBizAccount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.dpBizAccount = new BizAccountModel_ttypes.BizAccountTO();
        this.dpBizAccount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetAllBizAccountsResp.prototype.write = function(output) {
  output.writeStructBegin('GetAllBizAccountsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.mtBizAccount !== null && this.mtBizAccount !== undefined) {
    output.writeFieldBegin('mtBizAccount', Thrift.Type.STRUCT, 2);
    this.mtBizAccount.write(output);
    output.writeFieldEnd();
  }
  if (this.dpBizAccount !== null && this.dpBizAccount !== undefined) {
    output.writeFieldBegin('dpBizAccount', Thrift.Type.STRUCT, 3);
    this.dpBizAccount.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BatchGetBizAccountResp = module.exports.BatchGetBizAccountResp = function(args) {
  this.status = null;
  this.bizAccountMap = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizAccountMap !== undefined) {
      this.bizAccountMap = args.bizAccountMap;
    }
  }
};
BatchGetBizAccountResp.prototype = {};
BatchGetBizAccountResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.bizAccountMap = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var key22 = null;
          var val23 = null;
          key22 = input.readI32();
          val23 = new BizAccountModel_ttypes.BizAccountTO();
          val23.read(input);
          this.bizAccountMap[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BatchGetBizAccountResp.prototype.write = function(output) {
  output.writeStructBegin('BatchGetBizAccountResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizAccountMap !== null && this.bizAccountMap !== undefined) {
    output.writeFieldBegin('bizAccountMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.bizAccountMap));
    for (var kiter24 in this.bizAccountMap)
    {
      if (this.bizAccountMap.hasOwnProperty(kiter24))
      {
        var viter25 = this.bizAccountMap[kiter24];
        output.writeI32(kiter24);
        viter25.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchBizAccountByPhoneResp = module.exports.SearchBizAccountByPhoneResp = function(args) {
  this.status = null;
  this.bizAccountMap = null;
  this.total = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizAccountMap !== undefined) {
      this.bizAccountMap = args.bizAccountMap;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
  }
};
SearchBizAccountByPhoneResp.prototype = {};
SearchBizAccountByPhoneResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.bizAccountMap = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var key32 = null;
          var val33 = null;
          key32 = input.readI32();
          val33 = new BizAccountModel_ttypes.BizAccountTO();
          val33.read(input);
          this.bizAccountMap[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchBizAccountByPhoneResp.prototype.write = function(output) {
  output.writeStructBegin('SearchBizAccountByPhoneResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizAccountMap !== null && this.bizAccountMap !== undefined) {
    output.writeFieldBegin('bizAccountMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.bizAccountMap));
    for (var kiter34 in this.bizAccountMap)
    {
      if (this.bizAccountMap.hasOwnProperty(kiter34))
      {
        var viter35 = this.bizAccountMap[kiter34];
        output.writeI32(kiter34);
        viter35.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchBizAccountByPartTOResp = module.exports.SearchBizAccountByPartTOResp = function(args) {
  this.status = null;
  this.bizAccountMap = null;
  this.total = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizAccountMap !== undefined) {
      this.bizAccountMap = args.bizAccountMap;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
  }
};
SearchBizAccountByPartTOResp.prototype = {};
SearchBizAccountByPartTOResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size36 = 0;
        var _rtmp340;
        this.bizAccountMap = {};
        var _ktype37 = 0;
        var _vtype38 = 0;
        _rtmp340 = input.readMapBegin();
        _ktype37 = _rtmp340.ktype;
        _vtype38 = _rtmp340.vtype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var key42 = null;
          var val43 = null;
          key42 = input.readI32();
          val43 = new BizAccountModel_ttypes.BizAccountTO();
          val43.read(input);
          this.bizAccountMap[key42] = val43;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchBizAccountByPartTOResp.prototype.write = function(output) {
  output.writeStructBegin('SearchBizAccountByPartTOResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizAccountMap !== null && this.bizAccountMap !== undefined) {
    output.writeFieldBegin('bizAccountMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRUCT, Thrift.objectLength(this.bizAccountMap));
    for (var kiter44 in this.bizAccountMap)
    {
      if (this.bizAccountMap.hasOwnProperty(kiter44))
      {
        var viter45 = this.bizAccountMap[kiter44];
        output.writeI32(kiter44);
        viter45.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccPhoneByIdsReq = module.exports.GetBizAccPhoneByIdsReq = function(args) {
  this.ids = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
  }
};
GetBizAccPhoneByIdsReq.prototype = {};
GetBizAccPhoneByIdsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.ids = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = input.readI32();
          this.ids.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccPhoneByIdsReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccPhoneByIdsReq');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter53 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter53))
      {
        iter53 = this.ids[iter53];
        output.writeI32(iter53);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccPhoneByDpIdsReq = module.exports.GetBizAccPhoneByDpIdsReq = function(args) {
  this.dpIds = null;
  if (args) {
    if (args.dpIds !== undefined) {
      this.dpIds = args.dpIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dpIds is unset!');
    }
  }
};
GetBizAccPhoneByDpIdsReq.prototype = {};
GetBizAccPhoneByDpIdsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size54 = 0;
        var _rtmp358;
        this.dpIds = [];
        var _etype57 = 0;
        _rtmp358 = input.readListBegin();
        _etype57 = _rtmp358.etype;
        _size54 = _rtmp358.size;
        for (var _i59 = 0; _i59 < _size54; ++_i59)
        {
          var elem60 = null;
          elem60 = input.readI32();
          this.dpIds.push(elem60);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccPhoneByDpIdsReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccPhoneByDpIdsReq');
  if (this.dpIds !== null && this.dpIds !== undefined) {
    output.writeFieldBegin('dpIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.dpIds.length);
    for (var iter61 in this.dpIds)
    {
      if (this.dpIds.hasOwnProperty(iter61))
      {
        iter61 = this.dpIds[iter61];
        output.writeI32(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccPhoneResp = module.exports.GetBizAccPhoneResp = function(args) {
  this.status = null;
  this.phoneMap = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.phoneMap !== undefined) {
      this.phoneMap = args.phoneMap;
    }
  }
};
GetBizAccPhoneResp.prototype = {};
GetBizAccPhoneResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size62 = 0;
        var _rtmp366;
        this.phoneMap = {};
        var _ktype63 = 0;
        var _vtype64 = 0;
        _rtmp366 = input.readMapBegin();
        _ktype63 = _rtmp366.ktype;
        _vtype64 = _rtmp366.vtype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var key68 = null;
          var val69 = null;
          key68 = input.readI32();
          val69 = input.readString();
          this.phoneMap[key68] = val69;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccPhoneResp.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccPhoneResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.phoneMap !== null && this.phoneMap !== undefined) {
    output.writeFieldBegin('phoneMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.phoneMap));
    for (var kiter70 in this.phoneMap)
    {
      if (this.phoneMap.hasOwnProperty(kiter70))
      {
        var viter71 = this.phoneMap[kiter70];
        output.writeI32(kiter70);
        output.writeString(viter71);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryBizSensitiveReq = module.exports.QueryBizSensitiveReq = function(args) {
  this.bizAcctId = null;
  if (args) {
    if (args.bizAcctId !== undefined) {
      this.bizAcctId = args.bizAcctId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctId is unset!');
    }
  }
};
QueryBizSensitiveReq.prototype = {};
QueryBizSensitiveReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryBizSensitiveReq.prototype.write = function(output) {
  output.writeStructBegin('QueryBizSensitiveReq');
  if (this.bizAcctId !== null && this.bizAcctId !== undefined) {
    output.writeFieldBegin('bizAcctId', Thrift.Type.I32, 1);
    output.writeI32(this.bizAcctId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAcctByEmailReq = module.exports.GetBizAcctByEmailReq = function(args) {
  this.email = null;
  this.fields = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
    if (args.fields !== undefined) {
      this.fields = args.fields;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fields is unset!');
    }
  }
};
GetBizAcctByEmailReq.prototype = {};
GetBizAcctByEmailReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new BizAccountModel_ttypes.BizAccountFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAcctByEmailReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAcctByEmailReq');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryBizSensitiveResp = module.exports.QueryBizSensitiveResp = function(args) {
  this.status = null;
  this.sensitiveInfo = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.sensitiveInfo !== undefined) {
      this.sensitiveInfo = args.sensitiveInfo;
    }
  }
};
QueryBizSensitiveResp.prototype = {};
QueryBizSensitiveResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sensitiveInfo = new BizAccountModel_ttypes.BizSensitiveTO();
        this.sensitiveInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryBizSensitiveResp.prototype.write = function(output) {
  output.writeStructBegin('QueryBizSensitiveResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.sensitiveInfo !== null && this.sensitiveInfo !== undefined) {
    output.writeFieldBegin('sensitiveInfo', Thrift.Type.STRUCT, 2);
    this.sensitiveInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizEmailByTokenResp = module.exports.GetBizEmailByTokenResp = function(args) {
  this.status = null;
  this.email = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
  }
};
GetBizEmailByTokenResp.prototype = {};
GetBizEmailByTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizEmailByTokenResp.prototype.write = function(output) {
  output.writeStructBegin('GetBizEmailByTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccPhoneByIdsAndTokenReq = module.exports.GetBizAccPhoneByIdsAndTokenReq = function(args) {
  this.ids = null;
  this.token = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
GetBizAccPhoneByIdsAndTokenReq.prototype = {};
GetBizAccPhoneByIdsAndTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.ids = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readI32();
          this.ids.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccPhoneByIdsAndTokenReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccPhoneByIdsAndTokenReq');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter79 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter79))
      {
        iter79 = this.ids[iter79];
        output.writeI32(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccPhoneByDpIdsAndTokenReq = module.exports.GetBizAccPhoneByDpIdsAndTokenReq = function(args) {
  this.dpIds = null;
  this.token = null;
  if (args) {
    if (args.dpIds !== undefined) {
      this.dpIds = args.dpIds;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dpIds is unset!');
    }
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
GetBizAccPhoneByDpIdsAndTokenReq.prototype = {};
GetBizAccPhoneByDpIdsAndTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.dpIds = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readI32();
          this.dpIds.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccPhoneByDpIdsAndTokenReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccPhoneByDpIdsAndTokenReq');
  if (this.dpIds !== null && this.dpIds !== undefined) {
    output.writeFieldBegin('dpIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.dpIds.length);
    for (var iter87 in this.dpIds)
    {
      if (this.dpIds.hasOwnProperty(iter87))
      {
        iter87 = this.dpIds[iter87];
        output.writeI32(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecryptUniTokenReq = module.exports.DecryptUniTokenReq = function(args) {
  this.uniToken = null;
  if (args) {
    if (args.uniToken !== undefined) {
      this.uniToken = args.uniToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uniToken is unset!');
    }
  }
};
DecryptUniTokenReq.prototype = {};
DecryptUniTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uniToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecryptUniTokenReq.prototype.write = function(output) {
  output.writeStructBegin('DecryptUniTokenReq');
  if (this.uniToken !== null && this.uniToken !== undefined) {
    output.writeFieldBegin('uniToken', Thrift.Type.STRING, 1);
    output.writeString(this.uniToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecryptUniTokenResp = module.exports.DecryptUniTokenResp = function(args) {
  this.status = null;
  this.uniToken = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.uniToken !== undefined) {
      this.uniToken = args.uniToken;
    }
  }
};
DecryptUniTokenResp.prototype = {};
DecryptUniTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uniToken = new BizAccountAdminThriftServiceModel_ttypes.UniTokenTO();
        this.uniToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecryptUniTokenResp.prototype.write = function(output) {
  output.writeStructBegin('DecryptUniTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.uniToken !== null && this.uniToken !== undefined) {
    output.writeFieldBegin('uniToken', Thrift.Type.STRUCT, 2);
    this.uniToken.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccPhoneByIdReq = module.exports.GetBizAccPhoneByIdReq = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
  }
};
GetBizAccPhoneByIdReq.prototype = {};
GetBizAccPhoneByIdReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccPhoneByIdReq.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccPhoneByIdReq');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBizAccSinglePhoneResp = module.exports.GetBizAccSinglePhoneResp = function(args) {
  this.status = null;
  this.phone = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
  }
};
GetBizAccSinglePhoneResp.prototype = {};
GetBizAccSinglePhoneResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBizAccSinglePhoneResp.prototype.write = function(output) {
  output.writeStructBegin('GetBizAccSinglePhoneResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

