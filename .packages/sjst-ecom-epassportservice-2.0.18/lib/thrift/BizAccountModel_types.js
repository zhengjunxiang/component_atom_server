//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var BizAccountTO = module.exports.BizAccountTO = function(args) {
  this.id = null;
  this.login = null;
  this.name = null;
  this.status = null;
  this.createTime = null;
  this.modifyTime = null;
  this.phone = null;
  this.interCode = null;
  this.contactName = null;
  this.dpID = null;
  this.partType = null;
  this.partKey = null;
  this.email = null;
  this.contactPhone = null;
  this.contactPhoneInterCode = null;
  this.lastLoginTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.modifyTime !== undefined) {
      this.modifyTime = args.modifyTime;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
    if (args.partType !== undefined) {
      this.partType = args.partType;
    }
    if (args.partKey !== undefined) {
      this.partKey = args.partKey;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.contactPhone !== undefined) {
      this.contactPhone = args.contactPhone;
    }
    if (args.contactPhoneInterCode !== undefined) {
      this.contactPhoneInterCode = args.contactPhoneInterCode;
    }
    if (args.lastLoginTime !== undefined) {
      this.lastLoginTime = args.lastLoginTime;
    }
  }
};
BizAccountTO.prototype = {};
BizAccountTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.modifyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.interCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.contactName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.dpID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.partType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.partKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.contactPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.contactPhoneInterCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.lastLoginTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountTO.prototype.write = function(output) {
  output.writeStructBegin('BizAccountTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 2);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 5);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.modifyTime !== null && this.modifyTime !== undefined) {
    output.writeFieldBegin('modifyTime', Thrift.Type.I64, 6);
    output.writeI64(this.modifyTime);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 7);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.STRING, 8);
    output.writeString(this.interCode);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.STRING, 9);
    output.writeString(this.contactName);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.I32, 10);
    output.writeI32(this.dpID);
    output.writeFieldEnd();
  }
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.I32, 11);
    output.writeI32(this.partType);
    output.writeFieldEnd();
  }
  if (this.partKey !== null && this.partKey !== undefined) {
    output.writeFieldBegin('partKey', Thrift.Type.STRING, 12);
    output.writeString(this.partKey);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 13);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.contactPhone !== null && this.contactPhone !== undefined) {
    output.writeFieldBegin('contactPhone', Thrift.Type.STRING, 14);
    output.writeString(this.contactPhone);
    output.writeFieldEnd();
  }
  if (this.contactPhoneInterCode !== null && this.contactPhoneInterCode !== undefined) {
    output.writeFieldBegin('contactPhoneInterCode', Thrift.Type.STRING, 15);
    output.writeString(this.contactPhoneInterCode);
    output.writeFieldEnd();
  }
  if (this.lastLoginTime !== null && this.lastLoginTime !== undefined) {
    output.writeFieldBegin('lastLoginTime', Thrift.Type.I32, 16);
    output.writeI32(this.lastLoginTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountFields = module.exports.BizAccountFields = function(args) {
  this.id = null;
  this.login = null;
  this.name = null;
  this.status = null;
  this.createTime = null;
  this.modifyTime = null;
  this.phone = null;
  this.interCode = null;
  this.contactName = null;
  this.dpID = null;
  this.partType = null;
  this.partKey = null;
  this.email = null;
  this.contactPhone = null;
  this.contactPhoneInterCode = null;
  this.lastLoginTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.login !== undefined) {
      this.login = args.login;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.modifyTime !== undefined) {
      this.modifyTime = args.modifyTime;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.dpID !== undefined) {
      this.dpID = args.dpID;
    }
    if (args.partType !== undefined) {
      this.partType = args.partType;
    }
    if (args.partKey !== undefined) {
      this.partKey = args.partKey;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
    if (args.contactPhone !== undefined) {
      this.contactPhone = args.contactPhone;
    }
    if (args.contactPhoneInterCode !== undefined) {
      this.contactPhoneInterCode = args.contactPhoneInterCode;
    }
    if (args.lastLoginTime !== undefined) {
      this.lastLoginTime = args.lastLoginTime;
    }
  }
};
BizAccountFields.prototype = {};
BizAccountFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.id = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.login = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.name = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.status = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.createTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.modifyTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.phone = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.interCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.contactName = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.dpID = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.partType = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.partKey = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.email = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.contactPhone = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.contactPhoneInterCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.lastLoginTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountFields.prototype.write = function(output) {
  output.writeStructBegin('BizAccountFields');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.BOOL, 1);
    output.writeBool(this.id);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.BOOL, 2);
    output.writeBool(this.login);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.BOOL, 3);
    output.writeBool(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BOOL, 4);
    output.writeBool(this.status);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.BOOL, 5);
    output.writeBool(this.createTime);
    output.writeFieldEnd();
  }
  if (this.modifyTime !== null && this.modifyTime !== undefined) {
    output.writeFieldBegin('modifyTime', Thrift.Type.BOOL, 6);
    output.writeBool(this.modifyTime);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.BOOL, 7);
    output.writeBool(this.phone);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.BOOL, 8);
    output.writeBool(this.interCode);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.BOOL, 9);
    output.writeBool(this.contactName);
    output.writeFieldEnd();
  }
  if (this.dpID !== null && this.dpID !== undefined) {
    output.writeFieldBegin('dpID', Thrift.Type.BOOL, 10);
    output.writeBool(this.dpID);
    output.writeFieldEnd();
  }
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.BOOL, 11);
    output.writeBool(this.partType);
    output.writeFieldEnd();
  }
  if (this.partKey !== null && this.partKey !== undefined) {
    output.writeFieldBegin('partKey', Thrift.Type.BOOL, 12);
    output.writeBool(this.partKey);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.BOOL, 13);
    output.writeBool(this.email);
    output.writeFieldEnd();
  }
  if (this.contactPhone !== null && this.contactPhone !== undefined) {
    output.writeFieldBegin('contactPhone', Thrift.Type.BOOL, 14);
    output.writeBool(this.contactPhone);
    output.writeFieldEnd();
  }
  if (this.contactPhoneInterCode !== null && this.contactPhoneInterCode !== undefined) {
    output.writeFieldBegin('contactPhoneInterCode', Thrift.Type.BOOL, 15);
    output.writeBool(this.contactPhoneInterCode);
    output.writeFieldEnd();
  }
  if (this.lastLoginTime !== null && this.lastLoginTime !== undefined) {
    output.writeFieldBegin('lastLoginTime', Thrift.Type.BOOL, 16);
    output.writeBool(this.lastLoginTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountCreatedFieldsTO = module.exports.BizAccountCreatedFieldsTO = function(args) {
  this.login = null;
  this.name = null;
  this.password = null;
  this.phone = null;
  this.interCode = null;
  this.contactName = null;
  this.partType = null;
  this.partKey = null;
  this.contactPhone = null;
  this.contactPhoneInterCode = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.partType !== undefined) {
      this.partType = args.partType;
    }
    if (args.partKey !== undefined) {
      this.partKey = args.partKey;
    }
    if (args.contactPhone !== undefined) {
      this.contactPhone = args.contactPhone;
    }
    if (args.contactPhoneInterCode !== undefined) {
      this.contactPhoneInterCode = args.contactPhoneInterCode;
    }
  }
};
BizAccountCreatedFieldsTO.prototype = {};
BizAccountCreatedFieldsTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.interCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.contactName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.partKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.contactPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.contactPhoneInterCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountCreatedFieldsTO.prototype.write = function(output) {
  output.writeStructBegin('BizAccountCreatedFieldsTO');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.STRING, 5);
    output.writeString(this.interCode);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.STRING, 6);
    output.writeString(this.contactName);
    output.writeFieldEnd();
  }
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.I32, 7);
    output.writeI32(this.partType);
    output.writeFieldEnd();
  }
  if (this.partKey !== null && this.partKey !== undefined) {
    output.writeFieldBegin('partKey', Thrift.Type.STRING, 8);
    output.writeString(this.partKey);
    output.writeFieldEnd();
  }
  if (this.contactPhone !== null && this.contactPhone !== undefined) {
    output.writeFieldBegin('contactPhone', Thrift.Type.STRING, 9);
    output.writeString(this.contactPhone);
    output.writeFieldEnd();
  }
  if (this.contactPhoneInterCode !== null && this.contactPhoneInterCode !== undefined) {
    output.writeFieldBegin('contactPhoneInterCode', Thrift.Type.STRING, 10);
    output.writeString(this.contactPhoneInterCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountCreatedFieldsEmailTO = module.exports.BizAccountCreatedFieldsEmailTO = function(args) {
  this.login = null;
  this.name = null;
  this.password = null;
  this.phone = null;
  this.interCode = null;
  this.contactName = null;
  this.partType = null;
  this.partKey = null;
  this.email = null;
  if (args) {
    if (args.login !== undefined) {
      this.login = args.login;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field login is unset!');
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.partType !== undefined) {
      this.partType = args.partType;
    }
    if (args.partKey !== undefined) {
      this.partKey = args.partKey;
    }
    if (args.email !== undefined) {
      this.email = args.email;
    }
  }
};
BizAccountCreatedFieldsEmailTO.prototype = {};
BizAccountCreatedFieldsEmailTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.interCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.contactName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.partType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.partKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountCreatedFieldsEmailTO.prototype.write = function(output) {
  output.writeStructBegin('BizAccountCreatedFieldsEmailTO');
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 1);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.STRING, 5);
    output.writeString(this.interCode);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.STRING, 6);
    output.writeString(this.contactName);
    output.writeFieldEnd();
  }
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.I32, 7);
    output.writeI32(this.partType);
    output.writeFieldEnd();
  }
  if (this.partKey !== null && this.partKey !== undefined) {
    output.writeFieldBegin('partKey', Thrift.Type.STRING, 8);
    output.writeString(this.partKey);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 9);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountModifiedFieldsTO = module.exports.BizAccountModifiedFieldsTO = function(args) {
  this.password = null;
  this.name = null;
  this.status = null;
  this.phone = null;
  this.interCode = null;
  this.contactName = null;
  this.contactPhone = null;
  this.contactPhoneInterCode = null;
  if (args) {
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.contactName !== undefined) {
      this.contactName = args.contactName;
    }
    if (args.contactPhone !== undefined) {
      this.contactPhone = args.contactPhone;
    }
    if (args.contactPhoneInterCode !== undefined) {
      this.contactPhoneInterCode = args.contactPhoneInterCode;
    }
  }
};
BizAccountModifiedFieldsTO.prototype = {};
BizAccountModifiedFieldsTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.interCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.contactName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contactPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.contactPhoneInterCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountModifiedFieldsTO.prototype.write = function(output) {
  output.writeStructBegin('BizAccountModifiedFieldsTO');
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 1);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 4);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.STRING, 5);
    output.writeString(this.interCode);
    output.writeFieldEnd();
  }
  if (this.contactName !== null && this.contactName !== undefined) {
    output.writeFieldBegin('contactName', Thrift.Type.STRING, 6);
    output.writeString(this.contactName);
    output.writeFieldEnd();
  }
  if (this.contactPhone !== null && this.contactPhone !== undefined) {
    output.writeFieldBegin('contactPhone', Thrift.Type.STRING, 7);
    output.writeString(this.contactPhone);
    output.writeFieldEnd();
  }
  if (this.contactPhoneInterCode !== null && this.contactPhoneInterCode !== undefined) {
    output.writeFieldBegin('contactPhoneInterCode', Thrift.Type.STRING, 8);
    output.writeString(this.contactPhoneInterCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountPartTO = module.exports.BizAccountPartTO = function(args) {
  this.partType = null;
  this.partKey = null;
  if (args) {
    if (args.partType !== undefined) {
      this.partType = args.partType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partType is unset!');
    }
    if (args.partKey !== undefined) {
      this.partKey = args.partKey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field partKey is unset!');
    }
  }
};
BizAccountPartTO.prototype = {};
BizAccountPartTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.partType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.partKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountPartTO.prototype.write = function(output) {
  output.writeStructBegin('BizAccountPartTO');
  if (this.partType !== null && this.partType !== undefined) {
    output.writeFieldBegin('partType', Thrift.Type.I32, 1);
    output.writeI32(this.partType);
    output.writeFieldEnd();
  }
  if (this.partKey !== null && this.partKey !== undefined) {
    output.writeFieldBegin('partKey', Thrift.Type.STRING, 2);
    output.writeString(this.partKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountLogTO = module.exports.BizAccountLogTO = function(args) {
  this.bgSource = null;
  this.operatorType = null;
  this.operatorID = null;
  this.operatorIP = null;
  this.platform = null;
  this.deviceUuid = null;
  this.appKey = null;
  this.appVersion = null;
  this.sdkVersion = null;
  this.operateType = null;
  this.clientIP = null;
  if (args) {
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    }
    if (args.operatorType !== undefined) {
      this.operatorType = args.operatorType;
    }
    if (args.operatorID !== undefined) {
      this.operatorID = args.operatorID;
    }
    if (args.operatorIP !== undefined) {
      this.operatorIP = args.operatorIP;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.deviceUuid !== undefined) {
      this.deviceUuid = args.deviceUuid;
    }
    if (args.appKey !== undefined) {
      this.appKey = args.appKey;
    }
    if (args.appVersion !== undefined) {
      this.appVersion = args.appVersion;
    }
    if (args.sdkVersion !== undefined) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.operateType !== undefined) {
      this.operateType = args.operateType;
    }
    if (args.clientIP !== undefined) {
      this.clientIP = args.clientIP;
    }
  }
};
BizAccountLogTO.prototype = {};
BizAccountLogTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.operatorID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operatorIP = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.deviceUuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.appKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.appVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.operateType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.clientIP = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountLogTO.prototype.write = function(output) {
  output.writeStructBegin('BizAccountLogTO');
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 1);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.operatorType !== null && this.operatorType !== undefined) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 2);
    output.writeI32(this.operatorType);
    output.writeFieldEnd();
  }
  if (this.operatorID !== null && this.operatorID !== undefined) {
    output.writeFieldBegin('operatorID', Thrift.Type.I32, 3);
    output.writeI32(this.operatorID);
    output.writeFieldEnd();
  }
  if (this.operatorIP !== null && this.operatorIP !== undefined) {
    output.writeFieldBegin('operatorIP', Thrift.Type.STRING, 4);
    output.writeString(this.operatorIP);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 5);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.deviceUuid !== null && this.deviceUuid !== undefined) {
    output.writeFieldBegin('deviceUuid', Thrift.Type.STRING, 6);
    output.writeString(this.deviceUuid);
    output.writeFieldEnd();
  }
  if (this.appKey !== null && this.appKey !== undefined) {
    output.writeFieldBegin('appKey', Thrift.Type.STRING, 7);
    output.writeString(this.appKey);
    output.writeFieldEnd();
  }
  if (this.appVersion !== null && this.appVersion !== undefined) {
    output.writeFieldBegin('appVersion', Thrift.Type.STRING, 8);
    output.writeString(this.appVersion);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 9);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.operateType !== null && this.operateType !== undefined) {
    output.writeFieldBegin('operateType', Thrift.Type.I32, 10);
    output.writeI32(this.operateType);
    output.writeFieldEnd();
  }
  if (this.clientIP !== null && this.clientIP !== undefined) {
    output.writeFieldBegin('clientIP', Thrift.Type.STRING, 11);
    output.writeString(this.clientIP);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizAccountLogTOV2 = module.exports.BizAccountLogTOV2 = function(args) {
  this.bgSource = null;
  this.misID = null;
  this.operatorIP = null;
  this.platform = null;
  this.ua = null;
  this.domain = null;
  this.reason = null;
  this.appVersion = null;
  this.sdkVersion = null;
  this.deviceUuid = null;
  this.bizAcctId = null;
  this.operateType = null;
  this.clientIP = null;
  if (args) {
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bgSource is unset!');
    }
    if (args.misID !== undefined) {
      this.misID = args.misID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field misID is unset!');
    }
    if (args.operatorIP !== undefined) {
      this.operatorIP = args.operatorIP;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operatorIP is unset!');
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field platform is unset!');
    }
    if (args.ua !== undefined) {
      this.ua = args.ua;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ua is unset!');
    }
    if (args.domain !== undefined) {
      this.domain = args.domain;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field domain is unset!');
    }
    if (args.reason !== undefined) {
      this.reason = args.reason;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field reason is unset!');
    }
    if (args.appVersion !== undefined) {
      this.appVersion = args.appVersion;
    }
    if (args.sdkVersion !== undefined) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.deviceUuid !== undefined) {
      this.deviceUuid = args.deviceUuid;
    }
    if (args.bizAcctId !== undefined) {
      this.bizAcctId = args.bizAcctId;
    }
    if (args.operateType !== undefined) {
      this.operateType = args.operateType;
    }
    if (args.clientIP !== undefined) {
      this.clientIP = args.clientIP;
    }
  }
};
BizAccountLogTOV2.prototype = {};
BizAccountLogTOV2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.misID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.operatorIP = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ua = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.domain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.appVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.deviceUuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.operateType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.clientIP = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAccountLogTOV2.prototype.write = function(output) {
  output.writeStructBegin('BizAccountLogTOV2');
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 1);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.misID !== null && this.misID !== undefined) {
    output.writeFieldBegin('misID', Thrift.Type.I32, 2);
    output.writeI32(this.misID);
    output.writeFieldEnd();
  }
  if (this.operatorIP !== null && this.operatorIP !== undefined) {
    output.writeFieldBegin('operatorIP', Thrift.Type.STRING, 3);
    output.writeString(this.operatorIP);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 4);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.ua !== null && this.ua !== undefined) {
    output.writeFieldBegin('ua', Thrift.Type.STRING, 5);
    output.writeString(this.ua);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.STRING, 6);
    output.writeString(this.domain);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 7);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.appVersion !== null && this.appVersion !== undefined) {
    output.writeFieldBegin('appVersion', Thrift.Type.STRING, 8);
    output.writeString(this.appVersion);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 9);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.deviceUuid !== null && this.deviceUuid !== undefined) {
    output.writeFieldBegin('deviceUuid', Thrift.Type.STRING, 10);
    output.writeString(this.deviceUuid);
    output.writeFieldEnd();
  }
  if (this.bizAcctId !== null && this.bizAcctId !== undefined) {
    output.writeFieldBegin('bizAcctId', Thrift.Type.I32, 11);
    output.writeI32(this.bizAcctId);
    output.writeFieldEnd();
  }
  if (this.operateType !== null && this.operateType !== undefined) {
    output.writeFieldBegin('operateType', Thrift.Type.I32, 12);
    output.writeI32(this.operateType);
    output.writeFieldEnd();
  }
  if (this.clientIP !== null && this.clientIP !== undefined) {
    output.writeFieldBegin('clientIP', Thrift.Type.STRING, 13);
    output.writeString(this.clientIP);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizModifyLogTO = module.exports.BizModifyLogTO = function(args) {
  this.bgSource = null;
  this.operatorType = null;
  this.operatorID = null;
  this.operatorIP = null;
  this.platform = null;
  this.deviceUuid = null;
  this.appKey = null;
  this.appVersion = null;
  this.sdkVersion = null;
  this.operateType = null;
  if (args) {
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bgSource is unset!');
    }
    if (args.operatorType !== undefined) {
      this.operatorType = args.operatorType;
    }
    if (args.operatorID !== undefined) {
      this.operatorID = args.operatorID;
    }
    if (args.operatorIP !== undefined) {
      this.operatorIP = args.operatorIP;
    }
    if (args.platform !== undefined) {
      this.platform = args.platform;
    }
    if (args.deviceUuid !== undefined) {
      this.deviceUuid = args.deviceUuid;
    }
    if (args.appKey !== undefined) {
      this.appKey = args.appKey;
    }
    if (args.appVersion !== undefined) {
      this.appVersion = args.appVersion;
    }
    if (args.sdkVersion !== undefined) {
      this.sdkVersion = args.sdkVersion;
    }
    if (args.operateType !== undefined) {
      this.operateType = args.operateType;
    }
  }
};
BizModifyLogTO.prototype = {};
BizModifyLogTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.operatorType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.operatorID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.operatorIP = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.platform = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.deviceUuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.appKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.appVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.sdkVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.operateType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizModifyLogTO.prototype.write = function(output) {
  output.writeStructBegin('BizModifyLogTO');
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 1);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.operatorType !== null && this.operatorType !== undefined) {
    output.writeFieldBegin('operatorType', Thrift.Type.I32, 2);
    output.writeI32(this.operatorType);
    output.writeFieldEnd();
  }
  if (this.operatorID !== null && this.operatorID !== undefined) {
    output.writeFieldBegin('operatorID', Thrift.Type.I32, 3);
    output.writeI32(this.operatorID);
    output.writeFieldEnd();
  }
  if (this.operatorIP !== null && this.operatorIP !== undefined) {
    output.writeFieldBegin('operatorIP', Thrift.Type.STRING, 4);
    output.writeString(this.operatorIP);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.I32, 5);
    output.writeI32(this.platform);
    output.writeFieldEnd();
  }
  if (this.deviceUuid !== null && this.deviceUuid !== undefined) {
    output.writeFieldBegin('deviceUuid', Thrift.Type.STRING, 6);
    output.writeString(this.deviceUuid);
    output.writeFieldEnd();
  }
  if (this.appKey !== null && this.appKey !== undefined) {
    output.writeFieldBegin('appKey', Thrift.Type.STRING, 7);
    output.writeString(this.appKey);
    output.writeFieldEnd();
  }
  if (this.appVersion !== null && this.appVersion !== undefined) {
    output.writeFieldBegin('appVersion', Thrift.Type.STRING, 8);
    output.writeString(this.appVersion);
    output.writeFieldEnd();
  }
  if (this.sdkVersion !== null && this.sdkVersion !== undefined) {
    output.writeFieldBegin('sdkVersion', Thrift.Type.STRING, 9);
    output.writeString(this.sdkVersion);
    output.writeFieldEnd();
  }
  if (this.operateType !== null && this.operateType !== undefined) {
    output.writeFieldBegin('operateType', Thrift.Type.I32, 10);
    output.writeI32(this.operateType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizSensitiveTO = module.exports.BizSensitiveTO = function(args) {
  this.loginSensitive = null;
  this.nameSensitive = null;
  this.contactSensitive = null;
  if (args) {
    if (args.loginSensitive !== undefined) {
      this.loginSensitive = args.loginSensitive;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field loginSensitive is unset!');
    }
    if (args.nameSensitive !== undefined) {
      this.nameSensitive = args.nameSensitive;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field nameSensitive is unset!');
    }
    if (args.contactSensitive !== undefined) {
      this.contactSensitive = args.contactSensitive;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contactSensitive is unset!');
    }
  }
};
BizSensitiveTO.prototype = {};
BizSensitiveTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.loginSensitive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.nameSensitive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.contactSensitive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizSensitiveTO.prototype.write = function(output) {
  output.writeStructBegin('BizSensitiveTO');
  if (this.loginSensitive !== null && this.loginSensitive !== undefined) {
    output.writeFieldBegin('loginSensitive', Thrift.Type.BOOL, 1);
    output.writeBool(this.loginSensitive);
    output.writeFieldEnd();
  }
  if (this.nameSensitive !== null && this.nameSensitive !== undefined) {
    output.writeFieldBegin('nameSensitive', Thrift.Type.BOOL, 2);
    output.writeBool(this.nameSensitive);
    output.writeFieldEnd();
  }
  if (this.contactSensitive !== null && this.contactSensitive !== undefined) {
    output.writeFieldBegin('contactSensitive', Thrift.Type.BOOL, 3);
    output.writeBool(this.contactSensitive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

