//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')


var ttypes = module.exports = {};
var BizAcctOperationLogTO = module.exports.BizAcctOperationLogTO = function(args) {
  this.id = null;
  this.source = null;
  this.operator = null;
  this.bizAcctId = null;
  this.changeType = null;
  this.oldInfo = null;
  this.newInfo = null;
  this.addTime = null;
  this.ip = null;
  this.ext1 = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.source !== undefined) {
      this.source = args.source;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field source is unset!');
    }
    if (args.operator !== undefined) {
      this.operator = args.operator;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field operator is unset!');
    }
    if (args.bizAcctId !== undefined) {
      this.bizAcctId = args.bizAcctId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctId is unset!');
    }
    if (args.changeType !== undefined) {
      this.changeType = args.changeType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field changeType is unset!');
    }
    if (args.oldInfo !== undefined) {
      this.oldInfo = args.oldInfo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field oldInfo is unset!');
    }
    if (args.newInfo !== undefined) {
      this.newInfo = args.newInfo;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field newInfo is unset!');
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field addTime is unset!');
    }
    if (args.ip !== undefined) {
      this.ip = args.ip;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ip is unset!');
    }
    if (args.ext1 !== undefined) {
      this.ext1 = args.ext1;
    }
  }
};
BizAcctOperationLogTO.prototype = {};
BizAcctOperationLogTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.source = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.operator = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.changeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.oldInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.newInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.addTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.ip = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.ext1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizAcctOperationLogTO.prototype.write = function(output) {
  output.writeStructBegin('BizAcctOperationLogTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.I32, 2);
    output.writeI32(this.source);
    output.writeFieldEnd();
  }
  if (this.operator !== null && this.operator !== undefined) {
    output.writeFieldBegin('operator', Thrift.Type.I32, 3);
    output.writeI32(this.operator);
    output.writeFieldEnd();
  }
  if (this.bizAcctId !== null && this.bizAcctId !== undefined) {
    output.writeFieldBegin('bizAcctId', Thrift.Type.I32, 4);
    output.writeI32(this.bizAcctId);
    output.writeFieldEnd();
  }
  if (this.changeType !== null && this.changeType !== undefined) {
    output.writeFieldBegin('changeType', Thrift.Type.I32, 5);
    output.writeI32(this.changeType);
    output.writeFieldEnd();
  }
  if (this.oldInfo !== null && this.oldInfo !== undefined) {
    output.writeFieldBegin('oldInfo', Thrift.Type.STRING, 6);
    output.writeString(this.oldInfo);
    output.writeFieldEnd();
  }
  if (this.newInfo !== null && this.newInfo !== undefined) {
    output.writeFieldBegin('newInfo', Thrift.Type.STRING, 7);
    output.writeString(this.newInfo);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.I32, 8);
    output.writeI32(this.addTime);
    output.writeFieldEnd();
  }
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.I64, 9);
    output.writeI64(this.ip);
    output.writeFieldEnd();
  }
  if (this.ext1 !== null && this.ext1 !== undefined) {
    output.writeFieldBegin('ext1', Thrift.Type.STRING, 10);
    output.writeString(this.ext1);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchBizAccountHistoryReq = module.exports.SearchBizAccountHistoryReq = function(args) {
  this.bizAcctId = null;
  this.page = null;
  if (args) {
    if (args.bizAcctId !== undefined) {
      this.bizAcctId = args.bizAcctId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctId is unset!');
    }
    if (args.page !== undefined) {
      this.page = args.page;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field page is unset!');
    }
  }
};
SearchBizAccountHistoryReq.prototype = {};
SearchBizAccountHistoryReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.page = new CommonModel_ttypes.PageModel();
        this.page.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchBizAccountHistoryReq.prototype.write = function(output) {
  output.writeStructBegin('SearchBizAccountHistoryReq');
  if (this.bizAcctId !== null && this.bizAcctId !== undefined) {
    output.writeFieldBegin('bizAcctId', Thrift.Type.I32, 1);
    output.writeI32(this.bizAcctId);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.STRUCT, 2);
    this.page.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SearchBizAccountHistoryResp = module.exports.SearchBizAccountHistoryResp = function(args) {
  this.status = null;
  this.logs = null;
  this.total = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.logs !== undefined) {
      this.logs = args.logs;
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
  }
};
SearchBizAccountHistoryResp.prototype = {};
SearchBizAccountHistoryResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.logs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.BizAcctOperationLogTO();
          elem6.read(input);
          this.logs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchBizAccountHistoryResp.prototype.write = function(output) {
  output.writeStructBegin('SearchBizAccountHistoryResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.logs !== null && this.logs !== undefined) {
    output.writeFieldBegin('logs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.logs.length);
    for (var iter7 in this.logs)
    {
      if (this.logs.hasOwnProperty(iter7))
      {
        iter7 = this.logs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 3);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClearBizAcctCacheReq = module.exports.ClearBizAcctCacheReq = function(args) {
  this.bizAcctId = null;
  if (args) {
    if (args.bizAcctId !== undefined) {
      this.bizAcctId = args.bizAcctId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctId is unset!');
    }
  }
};
ClearBizAcctCacheReq.prototype = {};
ClearBizAcctCacheReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClearBizAcctCacheReq.prototype.write = function(output) {
  output.writeStructBegin('ClearBizAcctCacheReq');
  if (this.bizAcctId !== null && this.bizAcctId !== undefined) {
    output.writeFieldBegin('bizAcctId', Thrift.Type.I32, 1);
    output.writeI32(this.bizAcctId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

