//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')
var BizTokenModel_ttypes = require('./BizTokenModel_types')


var ttypes = module.exports = {};
var ExchangeTokenReq = module.exports.ExchangeTokenReq = function(args) {
  this.bizAcctID = null;
  this.appkey = null;
  this.bizTokenID = null;
  this.salt = null;
  if (args) {
    if (args.bizAcctID !== undefined) {
      this.bizAcctID = args.bizAcctID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctID is unset!');
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.bizTokenID !== undefined) {
      this.bizTokenID = args.bizTokenID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizTokenID is unset!');
    }
    if (args.salt !== undefined) {
      this.salt = args.salt;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field salt is unset!');
    }
  }
};
ExchangeTokenReq.prototype = {};
ExchangeTokenReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.bizAcctID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.bizTokenID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.salt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeTokenReq.prototype.write = function(output) {
  output.writeStructBegin('ExchangeTokenReq');
  if (this.bizAcctID !== null && this.bizAcctID !== undefined) {
    output.writeFieldBegin('bizAcctID', Thrift.Type.I64, 1);
    output.writeI64(this.bizAcctID);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 2);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.bizTokenID !== null && this.bizTokenID !== undefined) {
    output.writeFieldBegin('bizTokenID', Thrift.Type.I64, 3);
    output.writeI64(this.bizTokenID);
    output.writeFieldEnd();
  }
  if (this.salt !== null && this.salt !== undefined) {
    output.writeFieldBegin('salt', Thrift.Type.STRING, 4);
    output.writeString(this.salt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExchangeTokenResp = module.exports.ExchangeTokenResp = function(args) {
  this.status = null;
  this.token = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
  }
};
ExchangeTokenResp.prototype = {};
ExchangeTokenResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new BizTokenModel_ttypes.TokenRespTO();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExchangeTokenResp.prototype.write = function(output) {
  output.writeStructBegin('ExchangeTokenResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
    this.token.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcquireCodeReq = module.exports.AcquireCodeReq = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field token is unset!');
    }
  }
};
AcquireCodeReq.prototype = {};
AcquireCodeReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcquireCodeReq.prototype.write = function(output) {
  output.writeStructBegin('AcquireCodeReq');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AcquireCodeResp = module.exports.AcquireCodeResp = function(args) {
  this.status = null;
  this.bizTokenID = null;
  this.bizAcctID = null;
  this.salt = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizTokenID !== undefined) {
      this.bizTokenID = args.bizTokenID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizTokenID is unset!');
    }
    if (args.bizAcctID !== undefined) {
      this.bizAcctID = args.bizAcctID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctID is unset!');
    }
    if (args.salt !== undefined) {
      this.salt = args.salt;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field salt is unset!');
    }
  }
};
AcquireCodeResp.prototype = {};
AcquireCodeResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bizTokenID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.bizAcctID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.salt = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AcquireCodeResp.prototype.write = function(output) {
  output.writeStructBegin('AcquireCodeResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizTokenID !== null && this.bizTokenID !== undefined) {
    output.writeFieldBegin('bizTokenID', Thrift.Type.I64, 2);
    output.writeI64(this.bizTokenID);
    output.writeFieldEnd();
  }
  if (this.bizAcctID !== null && this.bizAcctID !== undefined) {
    output.writeFieldBegin('bizAcctID', Thrift.Type.I64, 3);
    output.writeI64(this.bizAcctID);
    output.writeFieldEnd();
  }
  if (this.salt !== null && this.salt !== undefined) {
    output.writeFieldBegin('salt', Thrift.Type.I32, 4);
    output.writeI32(this.salt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BizOauthLoginTO = module.exports.BizOauthLoginTO = function(args) {
  this.id = null;
  this.sourceTokenId = null;
  this.tokenId = null;
  this.loginStatus = null;
  this.expireTime = null;
  this.loginType = null;
  this.salt = null;
  this.loginTime = null;
  this.addTime = null;
  this.modTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.sourceTokenId !== undefined) {
      this.sourceTokenId = args.sourceTokenId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceTokenId is unset!');
    }
    if (args.tokenId !== undefined) {
      this.tokenId = args.tokenId;
    }
    if (args.loginStatus !== undefined) {
      this.loginStatus = args.loginStatus;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field loginStatus is unset!');
    }
    if (args.expireTime !== undefined) {
      this.expireTime = args.expireTime;
    }
    if (args.loginType !== undefined) {
      this.loginType = args.loginType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field loginType is unset!');
    }
    if (args.salt !== undefined) {
      this.salt = args.salt;
    }
    if (args.loginTime !== undefined) {
      this.loginTime = args.loginTime;
    }
    if (args.addTime !== undefined) {
      this.addTime = args.addTime;
    }
    if (args.modTime !== undefined) {
      this.modTime = args.modTime;
    }
  }
};
BizOauthLoginTO.prototype = {};
BizOauthLoginTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sourceTokenId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.tokenId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.loginStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.expireTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.loginType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.salt = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.loginTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.addTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.modTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BizOauthLoginTO.prototype.write = function(output) {
  output.writeStructBegin('BizOauthLoginTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.sourceTokenId !== null && this.sourceTokenId !== undefined) {
    output.writeFieldBegin('sourceTokenId', Thrift.Type.I64, 2);
    output.writeI64(this.sourceTokenId);
    output.writeFieldEnd();
  }
  if (this.tokenId !== null && this.tokenId !== undefined) {
    output.writeFieldBegin('tokenId', Thrift.Type.I64, 3);
    output.writeI64(this.tokenId);
    output.writeFieldEnd();
  }
  if (this.loginStatus !== null && this.loginStatus !== undefined) {
    output.writeFieldBegin('loginStatus', Thrift.Type.I32, 4);
    output.writeI32(this.loginStatus);
    output.writeFieldEnd();
  }
  if (this.expireTime !== null && this.expireTime !== undefined) {
    output.writeFieldBegin('expireTime', Thrift.Type.I32, 5);
    output.writeI32(this.expireTime);
    output.writeFieldEnd();
  }
  if (this.loginType !== null && this.loginType !== undefined) {
    output.writeFieldBegin('loginType', Thrift.Type.I32, 6);
    output.writeI32(this.loginType);
    output.writeFieldEnd();
  }
  if (this.salt !== null && this.salt !== undefined) {
    output.writeFieldBegin('salt', Thrift.Type.I32, 7);
    output.writeI32(this.salt);
    output.writeFieldEnd();
  }
  if (this.loginTime !== null && this.loginTime !== undefined) {
    output.writeFieldBegin('loginTime', Thrift.Type.I32, 8);
    output.writeI32(this.loginTime);
    output.writeFieldEnd();
  }
  if (this.addTime !== null && this.addTime !== undefined) {
    output.writeFieldBegin('addTime', Thrift.Type.I32, 9);
    output.writeI32(this.addTime);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.I32, 10);
    output.writeI32(this.modTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBizOauthLoginReq = module.exports.CreateBizOauthLoginReq = function(args) {
  this.bizOauthLoginTO = null;
  if (args) {
    if (args.bizOauthLoginTO !== undefined) {
      this.bizOauthLoginTO = args.bizOauthLoginTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizOauthLoginTO is unset!');
    }
  }
};
CreateBizOauthLoginReq.prototype = {};
CreateBizOauthLoginReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bizOauthLoginTO = new ttypes.BizOauthLoginTO();
        this.bizOauthLoginTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBizOauthLoginReq.prototype.write = function(output) {
  output.writeStructBegin('CreateBizOauthLoginReq');
  if (this.bizOauthLoginTO !== null && this.bizOauthLoginTO !== undefined) {
    output.writeFieldBegin('bizOauthLoginTO', Thrift.Type.STRUCT, 1);
    this.bizOauthLoginTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateBizOauthLoginResp = module.exports.CreateBizOauthLoginResp = function(args) {
  this.status = null;
  this.createdId = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.createdId !== undefined) {
      this.createdId = args.createdId;
    }
  }
};
CreateBizOauthLoginResp.prototype = {};
CreateBizOauthLoginResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateBizOauthLoginResp.prototype.write = function(output) {
  output.writeStructBegin('CreateBizOauthLoginResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.createdId !== null && this.createdId !== undefined) {
    output.writeFieldBegin('createdId', Thrift.Type.I64, 2);
    output.writeI64(this.createdId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryBizOauthLoginsReq = module.exports.QueryBizOauthLoginsReq = function(args) {
  this.pageModel = null;
  this.forceMaster = null;
  this.id = null;
  this.sourceTokenId = null;
  this.loginType = null;
  this.loginStatus = null;
  if (args) {
    if (args.pageModel !== undefined) {
      this.pageModel = args.pageModel;
    }
    if (args.forceMaster !== undefined) {
      this.forceMaster = args.forceMaster;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.sourceTokenId !== undefined) {
      this.sourceTokenId = args.sourceTokenId;
    }
    if (args.loginType !== undefined) {
      this.loginType = args.loginType;
    }
    if (args.loginStatus !== undefined) {
      this.loginStatus = args.loginStatus;
    }
  }
};
QueryBizOauthLoginsReq.prototype = {};
QueryBizOauthLoginsReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageModel = new CommonModel_ttypes.PageModel();
        this.pageModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.forceMaster = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.sourceTokenId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.loginType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.loginStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryBizOauthLoginsReq.prototype.write = function(output) {
  output.writeStructBegin('QueryBizOauthLoginsReq');
  if (this.pageModel !== null && this.pageModel !== undefined) {
    output.writeFieldBegin('pageModel', Thrift.Type.STRUCT, 1);
    this.pageModel.write(output);
    output.writeFieldEnd();
  }
  if (this.forceMaster !== null && this.forceMaster !== undefined) {
    output.writeFieldBegin('forceMaster', Thrift.Type.BOOL, 2);
    output.writeBool(this.forceMaster);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.sourceTokenId !== null && this.sourceTokenId !== undefined) {
    output.writeFieldBegin('sourceTokenId', Thrift.Type.I64, 4);
    output.writeI64(this.sourceTokenId);
    output.writeFieldEnd();
  }
  if (this.loginType !== null && this.loginType !== undefined) {
    output.writeFieldBegin('loginType', Thrift.Type.I32, 5);
    output.writeI32(this.loginType);
    output.writeFieldEnd();
  }
  if (this.loginStatus !== null && this.loginStatus !== undefined) {
    output.writeFieldBegin('loginStatus', Thrift.Type.I32, 6);
    output.writeI32(this.loginStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryBizOauthLoginsResp = module.exports.QueryBizOauthLoginsResp = function(args) {
  this.status = null;
  this.bizOauthLogins = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.bizOauthLogins !== undefined) {
      this.bizOauthLogins = args.bizOauthLogins;
    }
  }
};
QueryBizOauthLoginsResp.prototype = {};
QueryBizOauthLoginsResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.bizOauthLogins = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.BizOauthLoginTO();
          elem6.read(input);
          this.bizOauthLogins.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryBizOauthLoginsResp.prototype.write = function(output) {
  output.writeStructBegin('QueryBizOauthLoginsResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.bizOauthLogins !== null && this.bizOauthLogins !== undefined) {
    output.writeFieldBegin('bizOauthLogins', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.bizOauthLogins.length);
    for (var iter7 in this.bizOauthLogins)
    {
      if (this.bizOauthLogins.hasOwnProperty(iter7))
      {
        iter7 = this.bizOauthLogins[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateBizOauthLoginReq = module.exports.UpdateBizOauthLoginReq = function(args) {
  this.bizOauthLogin = null;
  if (args) {
    if (args.bizOauthLogin !== undefined) {
      this.bizOauthLogin = args.bizOauthLogin;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizOauthLogin is unset!');
    }
  }
};
UpdateBizOauthLoginReq.prototype = {};
UpdateBizOauthLoginReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.bizOauthLogin = new ttypes.BizOauthLoginTO();
        this.bizOauthLogin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateBizOauthLoginReq.prototype.write = function(output) {
  output.writeStructBegin('UpdateBizOauthLoginReq');
  if (this.bizOauthLogin !== null && this.bizOauthLogin !== undefined) {
    output.writeFieldBegin('bizOauthLogin', Thrift.Type.STRUCT, 1);
    this.bizOauthLogin.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateBizOauthLoginResp = module.exports.UpdateBizOauthLoginResp = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
  }
};
UpdateBizOauthLoginResp.prototype = {};
UpdateBizOauthLoginResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateBizOauthLoginResp.prototype.write = function(output) {
  output.writeStructBegin('UpdateBizOauthLoginResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

