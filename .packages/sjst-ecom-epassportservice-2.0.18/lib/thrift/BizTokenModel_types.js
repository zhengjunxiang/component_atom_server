//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var TokenRespTO = module.exports.TokenRespTO = function(args) {
  this.accessToken = null;
  this.refreshToken = null;
  this.expireIn = null;
  this.refreshIn = null;
  this.bizTokenID = null;
  if (args) {
    if (args.accessToken !== undefined) {
      this.accessToken = args.accessToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field accessToken is unset!');
    }
    if (args.refreshToken !== undefined) {
      this.refreshToken = args.refreshToken;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refreshToken is unset!');
    }
    if (args.expireIn !== undefined) {
      this.expireIn = args.expireIn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expireIn is unset!');
    }
    if (args.refreshIn !== undefined) {
      this.refreshIn = args.refreshIn;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field refreshIn is unset!');
    }
    if (args.bizTokenID !== undefined) {
      this.bizTokenID = args.bizTokenID;
    }
  }
};
TokenRespTO.prototype = {};
TokenRespTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.refreshToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.expireIn = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.refreshIn = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.bizTokenID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenRespTO.prototype.write = function(output) {
  output.writeStructBegin('TokenRespTO');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.refreshToken !== null && this.refreshToken !== undefined) {
    output.writeFieldBegin('refreshToken', Thrift.Type.STRING, 2);
    output.writeString(this.refreshToken);
    output.writeFieldEnd();
  }
  if (this.expireIn !== null && this.expireIn !== undefined) {
    output.writeFieldBegin('expireIn', Thrift.Type.I32, 3);
    output.writeI32(this.expireIn);
    output.writeFieldEnd();
  }
  if (this.refreshIn !== null && this.refreshIn !== undefined) {
    output.writeFieldBegin('refreshIn', Thrift.Type.I32, 4);
    output.writeI32(this.refreshIn);
    output.writeFieldEnd();
  }
  if (this.bizTokenID !== null && this.bizTokenID !== undefined) {
    output.writeFieldBegin('bizTokenID', Thrift.Type.I64, 5);
    output.writeI64(this.bizTokenID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

