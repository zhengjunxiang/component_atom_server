//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var CommonModel_ttypes = require('./CommonModel_types')


var ttypes = module.exports = {};
var EcomAuditModel = module.exports.EcomAuditModel = function(args) {
  this.id = null;
  this.status = null;
  this.rejectReason = null;
  this.octoAppkey = null;
  this.secret = null;
  this.type = null;
  this.bgSource = null;
  this.desc = null;
  this.author = null;
  this.approver = null;
  this.addtime = null;
  this.modtime = null;
  this.authId = null;
  this.productName = null;
  this.productAddress = null;
  this.productManagers = null;
  this.developers = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.rejectReason !== undefined) {
      this.rejectReason = args.rejectReason;
    }
    if (args.octoAppkey !== undefined) {
      this.octoAppkey = args.octoAppkey;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field octoAppkey is unset!');
    }
    if (args.secret !== undefined) {
      this.secret = args.secret;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bgSource is unset!');
    }
    if (args.desc !== undefined) {
      this.desc = args.desc;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field author is unset!');
    }
    if (args.approver !== undefined) {
      this.approver = args.approver;
    }
    if (args.addtime !== undefined) {
      this.addtime = args.addtime;
    }
    if (args.modtime !== undefined) {
      this.modtime = args.modtime;
    }
    if (args.authId !== undefined) {
      this.authId = args.authId;
    }
    if (args.productName !== undefined) {
      this.productName = args.productName;
    }
    if (args.productAddress !== undefined) {
      this.productAddress = args.productAddress;
    }
    if (args.productManagers !== undefined) {
      this.productManagers = args.productManagers;
    }
    if (args.developers !== undefined) {
      this.developers = args.developers;
    }
  }
};
EcomAuditModel.prototype = {};
EcomAuditModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rejectReason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.octoAppkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.approver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.addtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.modtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.authId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.productAddress = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.productManagers = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.productManagers.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.developers = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.developers.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EcomAuditModel.prototype.write = function(output) {
  output.writeStructBegin('EcomAuditModel');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.rejectReason !== null && this.rejectReason !== undefined) {
    output.writeFieldBegin('rejectReason', Thrift.Type.STRING, 3);
    output.writeString(this.rejectReason);
    output.writeFieldEnd();
  }
  if (this.octoAppkey !== null && this.octoAppkey !== undefined) {
    output.writeFieldBegin('octoAppkey', Thrift.Type.STRING, 4);
    output.writeString(this.octoAppkey);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 5);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 7);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 8);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 9);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.approver !== null && this.approver !== undefined) {
    output.writeFieldBegin('approver', Thrift.Type.STRING, 10);
    output.writeString(this.approver);
    output.writeFieldEnd();
  }
  if (this.addtime !== null && this.addtime !== undefined) {
    output.writeFieldBegin('addtime', Thrift.Type.I32, 11);
    output.writeI32(this.addtime);
    output.writeFieldEnd();
  }
  if (this.modtime !== null && this.modtime !== undefined) {
    output.writeFieldBegin('modtime', Thrift.Type.I32, 12);
    output.writeI32(this.modtime);
    output.writeFieldEnd();
  }
  if (this.authId !== null && this.authId !== undefined) {
    output.writeFieldBegin('authId', Thrift.Type.I32, 13);
    output.writeI32(this.authId);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 14);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.productAddress !== null && this.productAddress !== undefined) {
    output.writeFieldBegin('productAddress', Thrift.Type.STRING, 15);
    output.writeString(this.productAddress);
    output.writeFieldEnd();
  }
  if (this.productManagers !== null && this.productManagers !== undefined) {
    output.writeFieldBegin('productManagers', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.productManagers.length);
    for (var iter14 in this.productManagers)
    {
      if (this.productManagers.hasOwnProperty(iter14))
      {
        iter14 = this.productManagers[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.developers !== null && this.developers !== undefined) {
    output.writeFieldBegin('developers', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRING, this.developers.length);
    for (var iter15 in this.developers)
    {
      if (this.developers.hasOwnProperty(iter15))
      {
        iter15 = this.developers[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateEcomAuditReq = module.exports.CreateEcomAuditReq = function(args) {
  this.ecomAuditModel = null;
  if (args) {
    if (args.ecomAuditModel !== undefined) {
      this.ecomAuditModel = args.ecomAuditModel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomAuditModel is unset!');
    }
  }
};
CreateEcomAuditReq.prototype = {};
CreateEcomAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuditModel = new ttypes.EcomAuditModel();
        this.ecomAuditModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateEcomAuditReq.prototype.write = function(output) {
  output.writeStructBegin('CreateEcomAuditReq');
  if (this.ecomAuditModel !== null && this.ecomAuditModel !== undefined) {
    output.writeFieldBegin('ecomAuditModel', Thrift.Type.STRUCT, 1);
    this.ecomAuditModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateEcomAuditResp = module.exports.CreateEcomAuditResp = function(args) {
  this.status = null;
  this.id = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
CreateEcomAuditResp.prototype = {};
CreateEcomAuditResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateEcomAuditResp.prototype.write = function(output) {
  output.writeStructBegin('CreateEcomAuditResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryEcomAuditListByMisReq = module.exports.QueryEcomAuditListByMisReq = function(args) {
  this.mis = null;
  this.status = null;
  this.pageModel = null;
  if (args) {
    if (args.mis !== undefined) {
      this.mis = args.mis;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.pageModel !== undefined) {
      this.pageModel = args.pageModel;
    }
  }
};
QueryEcomAuditListByMisReq.prototype = {};
QueryEcomAuditListByMisReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mis = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageModel = new CommonModel_ttypes.PageModel();
        this.pageModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryEcomAuditListByMisReq.prototype.write = function(output) {
  output.writeStructBegin('QueryEcomAuditListByMisReq');
  if (this.mis !== null && this.mis !== undefined) {
    output.writeFieldBegin('mis', Thrift.Type.STRING, 1);
    output.writeString(this.mis);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.pageModel !== null && this.pageModel !== undefined) {
    output.writeFieldBegin('pageModel', Thrift.Type.STRUCT, 3);
    this.pageModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryEcomAuditListByMisResp = module.exports.QueryEcomAuditListByMisResp = function(args) {
  this.status = null;
  this.total = null;
  this.ecomAudits = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.total !== undefined) {
      this.total = args.total;
    }
    if (args.ecomAudits !== undefined) {
      this.ecomAudits = args.ecomAudits;
    }
  }
};
QueryEcomAuditListByMisResp.prototype = {};
QueryEcomAuditListByMisResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.total = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.ecomAudits = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.EcomAuditModel();
          elem22.read(input);
          this.ecomAudits.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryEcomAuditListByMisResp.prototype.write = function(output) {
  output.writeStructBegin('QueryEcomAuditListByMisResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.total !== null && this.total !== undefined) {
    output.writeFieldBegin('total', Thrift.Type.I32, 2);
    output.writeI32(this.total);
    output.writeFieldEnd();
  }
  if (this.ecomAudits !== null && this.ecomAudits !== undefined) {
    output.writeFieldBegin('ecomAudits', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomAudits.length);
    for (var iter23 in this.ecomAudits)
    {
      if (this.ecomAudits.hasOwnProperty(iter23))
      {
        iter23 = this.ecomAudits[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryEcomAuditListByIdListReq = module.exports.QueryEcomAuditListByIdListReq = function(args) {
  this.ids = null;
  this.pageModel = null;
  if (args) {
    if (args.ids !== undefined) {
      this.ids = args.ids;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ids is unset!');
    }
    if (args.pageModel !== undefined) {
      this.pageModel = args.pageModel;
    }
  }
};
QueryEcomAuditListByIdListReq.prototype = {};
QueryEcomAuditListByIdListReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.ids = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.ids.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pageModel = new CommonModel_ttypes.PageModel();
        this.pageModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryEcomAuditListByIdListReq.prototype.write = function(output) {
  output.writeStructBegin('QueryEcomAuditListByIdListReq');
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.ids.length);
    for (var iter31 in this.ids)
    {
      if (this.ids.hasOwnProperty(iter31))
      {
        iter31 = this.ids[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pageModel !== null && this.pageModel !== undefined) {
    output.writeFieldBegin('pageModel', Thrift.Type.STRUCT, 2);
    this.pageModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryEcomAuditListByIdListResp = module.exports.QueryEcomAuditListByIdListResp = function(args) {
  this.status = null;
  this.ecomAudits = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.ecomAudits !== undefined) {
      this.ecomAudits = args.ecomAudits;
    }
  }
};
QueryEcomAuditListByIdListResp.prototype = {};
QueryEcomAuditListByIdListResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.ecomAudits = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.EcomAuditModel();
          elem38.read(input);
          this.ecomAudits.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryEcomAuditListByIdListResp.prototype.write = function(output) {
  output.writeStructBegin('QueryEcomAuditListByIdListResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.ecomAudits !== null && this.ecomAudits !== undefined) {
    output.writeFieldBegin('ecomAudits', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.ecomAudits.length);
    for (var iter39 in this.ecomAudits)
    {
      if (this.ecomAudits.hasOwnProperty(iter39))
      {
        iter39 = this.ecomAudits[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyEcomAuditReq = module.exports.ModifyEcomAuditReq = function(args) {
  this.ecomAuditModel = null;
  if (args) {
    if (args.ecomAuditModel !== undefined) {
      this.ecomAuditModel = args.ecomAuditModel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ecomAuditModel is unset!');
    }
  }
};
ModifyEcomAuditReq.prototype = {};
ModifyEcomAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ecomAuditModel = new ttypes.EcomAuditModel();
        this.ecomAuditModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyEcomAuditReq.prototype.write = function(output) {
  output.writeStructBegin('ModifyEcomAuditReq');
  if (this.ecomAuditModel !== null && this.ecomAuditModel !== undefined) {
    output.writeFieldBegin('ecomAuditModel', Thrift.Type.STRUCT, 1);
    this.ecomAuditModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomerAuditModel = module.exports.CustomerAuditModel = function(args) {
  this.id = null;
  this.status = null;
  this.comment = null;
  this.customerId = null;
  this.bizAcctID = null;
  this.qualificationInfo = null;
  this.customerType = null;
  this.auditId = null;
  this.phone = null;
  this.addtime = null;
  this.modtime = null;
  this.qualificationInfoUrls = null;
  this.changeBook = null;
  this.bizLine = null;
  this.interCode = null;
  this.bgSource = null;
  this.password = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    }
    if (args.bizAcctID !== undefined) {
      this.bizAcctID = args.bizAcctID;
    }
    if (args.qualificationInfo !== undefined) {
      this.qualificationInfo = args.qualificationInfo;
    }
    if (args.customerType !== undefined) {
      this.customerType = args.customerType;
    }
    if (args.auditId !== undefined) {
      this.auditId = args.auditId;
    }
    if (args.phone !== undefined) {
      this.phone = args.phone;
    }
    if (args.addtime !== undefined) {
      this.addtime = args.addtime;
    }
    if (args.modtime !== undefined) {
      this.modtime = args.modtime;
    }
    if (args.qualificationInfoUrls !== undefined) {
      this.qualificationInfoUrls = args.qualificationInfoUrls;
    }
    if (args.changeBook !== undefined) {
      this.changeBook = args.changeBook;
    }
    if (args.bizLine !== undefined) {
      this.bizLine = args.bizLine;
    }
    if (args.interCode !== undefined) {
      this.interCode = args.interCode;
    }
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
CustomerAuditModel.prototype = {};
CustomerAuditModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.customerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bizAcctID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.qualificationInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.customerType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.auditId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.addtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.modtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.qualificationInfoUrls = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.changeBook = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.bizLine = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.interCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerAuditModel.prototype.write = function(output) {
  output.writeStructBegin('CustomerAuditModel');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I32, 4);
    output.writeI32(this.customerId);
    output.writeFieldEnd();
  }
  if (this.bizAcctID !== null && this.bizAcctID !== undefined) {
    output.writeFieldBegin('bizAcctID', Thrift.Type.I32, 5);
    output.writeI32(this.bizAcctID);
    output.writeFieldEnd();
  }
  if (this.qualificationInfo !== null && this.qualificationInfo !== undefined) {
    output.writeFieldBegin('qualificationInfo', Thrift.Type.STRING, 6);
    output.writeString(this.qualificationInfo);
    output.writeFieldEnd();
  }
  if (this.customerType !== null && this.customerType !== undefined) {
    output.writeFieldBegin('customerType', Thrift.Type.I32, 7);
    output.writeI32(this.customerType);
    output.writeFieldEnd();
  }
  if (this.auditId !== null && this.auditId !== undefined) {
    output.writeFieldBegin('auditId', Thrift.Type.I32, 8);
    output.writeI32(this.auditId);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 9);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.addtime !== null && this.addtime !== undefined) {
    output.writeFieldBegin('addtime', Thrift.Type.I32, 10);
    output.writeI32(this.addtime);
    output.writeFieldEnd();
  }
  if (this.modtime !== null && this.modtime !== undefined) {
    output.writeFieldBegin('modtime', Thrift.Type.I32, 11);
    output.writeI32(this.modtime);
    output.writeFieldEnd();
  }
  if (this.qualificationInfoUrls !== null && this.qualificationInfoUrls !== undefined) {
    output.writeFieldBegin('qualificationInfoUrls', Thrift.Type.STRING, 12);
    output.writeString(this.qualificationInfoUrls);
    output.writeFieldEnd();
  }
  if (this.changeBook !== null && this.changeBook !== undefined) {
    output.writeFieldBegin('changeBook', Thrift.Type.STRING, 13);
    output.writeString(this.changeBook);
    output.writeFieldEnd();
  }
  if (this.bizLine !== null && this.bizLine !== undefined) {
    output.writeFieldBegin('bizLine', Thrift.Type.I32, 14);
    output.writeI32(this.bizLine);
    output.writeFieldEnd();
  }
  if (this.interCode !== null && this.interCode !== undefined) {
    output.writeFieldBegin('interCode', Thrift.Type.STRING, 15);
    output.writeString(this.interCode);
    output.writeFieldEnd();
  }
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 16);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 17);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateCustomerAuditReq = module.exports.CreateCustomerAuditReq = function(args) {
  this.customerAuditModel = null;
  if (args) {
    if (args.customerAuditModel !== undefined) {
      this.customerAuditModel = args.customerAuditModel;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerAuditModel is unset!');
    }
  }
};
CreateCustomerAuditReq.prototype = {};
CreateCustomerAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerAuditModel = new ttypes.CustomerAuditModel();
        this.customerAuditModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateCustomerAuditReq.prototype.write = function(output) {
  output.writeStructBegin('CreateCustomerAuditReq');
  if (this.customerAuditModel !== null && this.customerAuditModel !== undefined) {
    output.writeFieldBegin('customerAuditModel', Thrift.Type.STRUCT, 1);
    this.customerAuditModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryCustomerAuditReq = module.exports.QueryCustomerAuditReq = function(args) {
  this.bizAcctID = null;
  if (args) {
    if (args.bizAcctID !== undefined) {
      this.bizAcctID = args.bizAcctID;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bizAcctID is unset!');
    }
  }
};
QueryCustomerAuditReq.prototype = {};
QueryCustomerAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bizAcctID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryCustomerAuditReq.prototype.write = function(output) {
  output.writeStructBegin('QueryCustomerAuditReq');
  if (this.bizAcctID !== null && this.bizAcctID !== undefined) {
    output.writeFieldBegin('bizAcctID', Thrift.Type.STRING, 1);
    output.writeString(this.bizAcctID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryCustomerAuditResp = module.exports.QueryCustomerAuditResp = function(args) {
  this.status = null;
  this.customerAuditModel = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.customerAuditModel !== undefined) {
      this.customerAuditModel = args.customerAuditModel;
    }
  }
};
QueryCustomerAuditResp.prototype = {};
QueryCustomerAuditResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.customerAuditModel = new ttypes.CustomerAuditModel();
        this.customerAuditModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryCustomerAuditResp.prototype.write = function(output) {
  output.writeStructBegin('QueryCustomerAuditResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.customerAuditModel !== null && this.customerAuditModel !== undefined) {
    output.writeFieldBegin('customerAuditModel', Thrift.Type.STRUCT, 2);
    this.customerAuditModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModifyMobileAuditTO = module.exports.ModifyMobileAuditTO = function(args) {
  this.id = null;
  this.acctId = null;
  this.customerId = null;
  this.bizLine = null;
  this.legalPersonPhone = null;
  this.newPhone = null;
  this.bgSource = null;
  this.appkey = null;
  this.status = null;
  this.addtime = null;
  this.modtime = null;
  this.legalPersonPhoneInterCode = null;
  this.newPhoneInterCode = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.acctId !== undefined) {
      this.acctId = args.acctId;
    }
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    }
    if (args.bizLine !== undefined) {
      this.bizLine = args.bizLine;
    }
    if (args.legalPersonPhone !== undefined) {
      this.legalPersonPhone = args.legalPersonPhone;
    }
    if (args.newPhone !== undefined) {
      this.newPhone = args.newPhone;
    }
    if (args.bgSource !== undefined) {
      this.bgSource = args.bgSource;
    }
    if (args.appkey !== undefined) {
      this.appkey = args.appkey;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.addtime !== undefined) {
      this.addtime = args.addtime;
    }
    if (args.modtime !== undefined) {
      this.modtime = args.modtime;
    }
    if (args.legalPersonPhoneInterCode !== undefined) {
      this.legalPersonPhoneInterCode = args.legalPersonPhoneInterCode;
    }
    if (args.newPhoneInterCode !== undefined) {
      this.newPhoneInterCode = args.newPhoneInterCode;
    }
  }
};
ModifyMobileAuditTO.prototype = {};
ModifyMobileAuditTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.acctId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.customerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.bizLine = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.legalPersonPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.newPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.bgSource = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.appkey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.addtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.modtime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.legalPersonPhoneInterCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.newPhoneInterCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModifyMobileAuditTO.prototype.write = function(output) {
  output.writeStructBegin('ModifyMobileAuditTO');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.acctId !== null && this.acctId !== undefined) {
    output.writeFieldBegin('acctId', Thrift.Type.I32, 2);
    output.writeI32(this.acctId);
    output.writeFieldEnd();
  }
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I32, 3);
    output.writeI32(this.customerId);
    output.writeFieldEnd();
  }
  if (this.bizLine !== null && this.bizLine !== undefined) {
    output.writeFieldBegin('bizLine', Thrift.Type.I32, 4);
    output.writeI32(this.bizLine);
    output.writeFieldEnd();
  }
  if (this.legalPersonPhone !== null && this.legalPersonPhone !== undefined) {
    output.writeFieldBegin('legalPersonPhone', Thrift.Type.STRING, 5);
    output.writeString(this.legalPersonPhone);
    output.writeFieldEnd();
  }
  if (this.newPhone !== null && this.newPhone !== undefined) {
    output.writeFieldBegin('newPhone', Thrift.Type.STRING, 6);
    output.writeString(this.newPhone);
    output.writeFieldEnd();
  }
  if (this.bgSource !== null && this.bgSource !== undefined) {
    output.writeFieldBegin('bgSource', Thrift.Type.I32, 7);
    output.writeI32(this.bgSource);
    output.writeFieldEnd();
  }
  if (this.appkey !== null && this.appkey !== undefined) {
    output.writeFieldBegin('appkey', Thrift.Type.STRING, 8);
    output.writeString(this.appkey);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.addtime !== null && this.addtime !== undefined) {
    output.writeFieldBegin('addtime', Thrift.Type.I32, 10);
    output.writeI32(this.addtime);
    output.writeFieldEnd();
  }
  if (this.modtime !== null && this.modtime !== undefined) {
    output.writeFieldBegin('modtime', Thrift.Type.I32, 11);
    output.writeI32(this.modtime);
    output.writeFieldEnd();
  }
  if (this.legalPersonPhoneInterCode !== null && this.legalPersonPhoneInterCode !== undefined) {
    output.writeFieldBegin('legalPersonPhoneInterCode', Thrift.Type.STRING, 12);
    output.writeString(this.legalPersonPhoneInterCode);
    output.writeFieldEnd();
  }
  if (this.newPhoneInterCode !== null && this.newPhoneInterCode !== undefined) {
    output.writeFieldBegin('newPhoneInterCode', Thrift.Type.STRING, 13);
    output.writeString(this.newPhoneInterCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateModifyMobileAuditReq = module.exports.CreateModifyMobileAuditReq = function(args) {
  this.modifyMobileAuditTO = null;
  if (args) {
    if (args.modifyMobileAuditTO !== undefined) {
      this.modifyMobileAuditTO = args.modifyMobileAuditTO;
    }
  }
};
CreateModifyMobileAuditReq.prototype = {};
CreateModifyMobileAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifyMobileAuditTO = new ttypes.ModifyMobileAuditTO();
        this.modifyMobileAuditTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateModifyMobileAuditReq.prototype.write = function(output) {
  output.writeStructBegin('CreateModifyMobileAuditReq');
  if (this.modifyMobileAuditTO !== null && this.modifyMobileAuditTO !== undefined) {
    output.writeFieldBegin('modifyMobileAuditTO', Thrift.Type.STRUCT, 1);
    this.modifyMobileAuditTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreateModifyMobileAuditResp = module.exports.CreateModifyMobileAuditResp = function(args) {
  this.status = null;
  this.modifyMobileAuditTO = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.modifyMobileAuditTO !== undefined) {
      this.modifyMobileAuditTO = args.modifyMobileAuditTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modifyMobileAuditTO is unset!');
    }
  }
};
CreateModifyMobileAuditResp.prototype = {};
CreateModifyMobileAuditResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifyMobileAuditTO = new ttypes.ModifyMobileAuditTO();
        this.modifyMobileAuditTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreateModifyMobileAuditResp.prototype.write = function(output) {
  output.writeStructBegin('CreateModifyMobileAuditResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.modifyMobileAuditTO !== null && this.modifyMobileAuditTO !== undefined) {
    output.writeFieldBegin('modifyMobileAuditTO', Thrift.Type.STRUCT, 2);
    this.modifyMobileAuditTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateModifyMobileAuditReq = module.exports.UpdateModifyMobileAuditReq = function(args) {
  this.modifyMobileAuditTO = null;
  if (args) {
    if (args.modifyMobileAuditTO !== undefined) {
      this.modifyMobileAuditTO = args.modifyMobileAuditTO;
    }
  }
};
UpdateModifyMobileAuditReq.prototype = {};
UpdateModifyMobileAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifyMobileAuditTO = new ttypes.ModifyMobileAuditTO();
        this.modifyMobileAuditTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateModifyMobileAuditReq.prototype.write = function(output) {
  output.writeStructBegin('UpdateModifyMobileAuditReq');
  if (this.modifyMobileAuditTO !== null && this.modifyMobileAuditTO !== undefined) {
    output.writeFieldBegin('modifyMobileAuditTO', Thrift.Type.STRUCT, 1);
    this.modifyMobileAuditTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryModifyMobileAuditReq = module.exports.QueryModifyMobileAuditReq = function(args) {
  this.modifyId = null;
  if (args) {
    if (args.modifyId !== undefined) {
      this.modifyId = args.modifyId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modifyId is unset!');
    }
  }
};
QueryModifyMobileAuditReq.prototype = {};
QueryModifyMobileAuditReq.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modifyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryModifyMobileAuditReq.prototype.write = function(output) {
  output.writeStructBegin('QueryModifyMobileAuditReq');
  if (this.modifyId !== null && this.modifyId !== undefined) {
    output.writeFieldBegin('modifyId', Thrift.Type.I32, 1);
    output.writeI32(this.modifyId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueryModifyMobileAuditResp = module.exports.QueryModifyMobileAuditResp = function(args) {
  this.status = null;
  this.modifyMobileAuditTO = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.modifyMobileAuditTO !== undefined) {
      this.modifyMobileAuditTO = args.modifyMobileAuditTO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field modifyMobileAuditTO is unset!');
    }
  }
};
QueryModifyMobileAuditResp.prototype = {};
QueryModifyMobileAuditResp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new CommonModel_ttypes.Status();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.modifyMobileAuditTO = new ttypes.ModifyMobileAuditTO();
        this.modifyMobileAuditTO.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryModifyMobileAuditResp.prototype.write = function(output) {
  output.writeStructBegin('QueryModifyMobileAuditResp');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.modifyMobileAuditTO !== null && this.modifyMobileAuditTO !== undefined) {
    output.writeFieldBegin('modifyMobileAuditTO', Thrift.Type.STRUCT, 2);
    this.modifyMobileAuditTO.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

